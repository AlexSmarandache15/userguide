<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="json-schema-component-properties">
  <title> JSON Schema Component Properties </title>
  <body>
    <p id="p_qjc_cgk_54b">TODO.</p>
    <table colsep="1" rowsep="1" frame="all" id="table_rjc_cgk_54b">
      <title>JSON Schema Diagram Component Properties</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Properties Group</entry>
            <entry>Property Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry dir="ltr">Common Properties</entry>
            <entry dir="ltr">type</entry>
            <entry>
              <p dir="ltr" id="p_pwc_sfc_prb">The type keyword specifies the type of data that the
                schema is expecting to validate. This keyword is not mandatory and the value of the
                keyword must be a string, representing a valid data type, or an array of strings,
                representing a valid list of data types.</p>
              <p dir="ltr" id="p_qwc_sfc_prb">When specifying multiple types, their order is
                irrelevant to the validation process, but you should make sure that a data type is
                specified only once.</p>
            </entry>
          </row>
          <row>
            <entry morerows="6"/>
            <entry dir="ltr">$ref</entry>
            <entry dir="ltr">An instance is valid against this keyword if is valid against the
              schema that points to the location indicated in the value of this keyword. The value
              of this keyword must be a string representing an URI, URI reference, URI template or a
              JSON pointer.</entry>
          </row>
          <row>
            <entry dir="ltr">$id</entry>
            <entry dir="ltr">This keyword is used to specify an unique ID for a document or a
              document subschemas. The value of this keyword must be a string representing an URI.
              All subschema IDs are resolved relative to the document’s ID. It is not a required
              keyword, but we recommend you using it, as a best practice.</entry>
          </row>
          <row>
            <entry dir="ltr">enum</entry>
            <entry dir="ltr">An instance validates against this keyword if its value equals can be
              found in the items defined by the value of this keyword. The value of this keyword
              must be an array containing anything. An empty array is not allowed.</entry>
          </row>
          <row>
            <entry dir="ltr">const</entry>
            <entry dir="ltr">An instance validates against this keyword if its value equals to the
              value of this keyword. The value of this keyword can be anything.</entry>
          </row>
          <row>
            <entry dir="ltr">$comment</entry>
            <entry dir="ltr">Contains an observation about the schema. The value of this keyword
              must be a string.</entry>
          </row>
          <row>
            <entry dir="ltr">readOnly</entry>
            <entry dir="ltr">The readOnly keyword is used to mark specific properties as
              read-only.</entry>
          </row>
          <row>
            <entry dir="ltr">writeOnly</entry>
            <entry dir="ltr">The writeOnly keyword is used to mark specific properties as
              write-only.</entry>
          </row>
          <row>
            <entry dir="ltr">Object Properties</entry>
            <entry dir="ltr">additionalProperties</entry>
            <entry>
              <p dir="ltr" id="p_rwc_sfc_prb">An object is valid against this keyword if all
                  <i>unchecked</i> properties are valid against the schema defined by the value of
                this keyword. <i>Unchecked</i> properties are the properties not checked by the
                properties and patternProperties keywords (if a property name is not present in
                properties keyword and doesn’t match any regular expression defined by
                patternProperties keyword, then it is considered <i>unchecked</i>). The value of
                this keyword must be a valid json schema (object or boolean).</p>
              <p dir="ltr" id="p_swc_sfc_prb">To be more concise, if we have <i>unchecked</i>
                properties:</p>
              <ul id="ul_twc_sfc_prb">
                <li dir="ltr" id="li_uwc_sfc_prb">
                  <p dir="ltr" id="p_vwc_sfc_prb">if the value of this keyword is true, is always
                    valid</p>
                </li>
                <li dir="ltr" id="li_wwc_sfc_prb">
                  <p dir="ltr" id="p_xwc_sfc_prb">if the value is false, is never valid</p>
                </li>
                <li dir="ltr" id="li_ywc_sfc_prb">
                  <p dir="ltr" id="p_zwc_sfc_prb">if the value contains an object (schema), every
                    property must be valid against that schema.</p>
                </li>
              </ul>
            </entry>
          </row>
          <row>
            <entry morerows="5"/>
            <entry dir="ltr">dependencies</entry>
            <entry dir="ltr">An object is valid against this keyword if it mets all dependencies
              specified by this keyword value.</entry>
          </row>
          <row>
            <entry dir="ltr">maxProperties</entry>
            <entry dir="ltr">An object is valid against this keyword if the number of properties it
              contains is lower then, or equal to, the value of this keyword. The value of this
              keyword must be a non-negative integer. Using 0 as a value means that the object must
              be empty (no properties).</entry>
          </row>
          <row>
            <entry dir="ltr">minProperties</entry>
            <entry dir="ltr">An object is valid against this keyword if the number of properties it
              contains is greater then, or equal to, the value of this keyword. The value of this
              keyword must be a non-negative integer. Using 0 as a value has no effect.</entry>
          </row>
          <row>
            <entry dir="ltr">patternProperties</entry>
            <entry dir="ltr">An object is valid against this keyword if every property where a
              property name (key) matches a regular expression from the value of this keyword, is
              also valid against the corresponding schema. The value of this keyword must an object,
              where the keys must be valid regular expressions and the corresponding values must be
              valid json schemas (object or boolean).</entry>
          </row>
          <row>
            <entry dir="ltr">propertyNames</entry>
            <entry dir="ltr">An object is valid against this keyword if every property name (key) is
              valid against the value of this keyword. The value of this keyword must be a valid
              json schema (an object or a boolean).</entry>
          </row>
          <row>
            <entry dir="ltr">required</entry>
            <entry dir="ltr">An object is valid against this keyword if it contains all property
              names (keys) specified by the value of this keyword. The value of this keyword must be
              a non-empty array of strings representing property names.</entry>
          </row>
          <row>
            <entry dir="ltr">Array Properties</entry>
            <entry dir="ltr">additionalItems</entry>
            <entry dir="ltr">An array is valid against this keyword if all <i>unchecked</i> items
              are valid against the schema defined by the keyword value.</entry>
          </row>
          <row>
            <entry morerows="4"/>
            <entry dir="ltr">contains</entry>
            <entry dir="ltr">An array is valid against this keyword if at least one item is valid
              against the schema defined by the keyword value. The value of this keyword must be a
              valid json schema (object or boolean).</entry>
          </row>
          <row>
            <entry dir="ltr">items</entry>
            <entry>
              <p dir="ltr" id="p_axc_sfc_prb">An array is valid against this keyword if items are
                valid against the corresponding schemas provided by the keyword value. The value of
                this keyword can be</p>
              <ul id="ul_bxc_sfc_prb">
                <li dir="ltr" id="li_cxc_sfc_prb">
                  <p dir="ltr" id="p_dxc_sfc_prb">a valid json schema (object or boolean), then
                    every item must be valid against this schema</p>
                </li>
                <li dir="ltr" id="li_exc_sfc_prb">
                  <p dir="ltr" id="p_fxc_sfc_prb">an array of valid json schemas, then each item
                    must be valid against the schema defined at the same position (index). Items
                    that don’t have a corresponding position (array contains 5 items and this
                    keyword only has 3) will be considered valid, unless the additionalItems keyword
                    is present - which will decide the validity.</p>
                </li>
              </ul>
            </entry>
          </row>
          <row>
            <entry dir="ltr">maxItems</entry>
            <entry dir="ltr">An array is valid against this keyword, if the number of items it
              contains is lower than, or equal to, the value of this keyword. The value of this
              keyword must be a non-negative integer.</entry>
          </row>
          <row>
            <entry dir="ltr">minItems</entry>
            <entry dir="ltr">An array is valid against this keyword, if the number of items it
              contains is greater than, or equal to, the value of this keyword. The value of this
              keyword must be a non-negative integer.</entry>
          </row>
          <row>
            <entry dir="ltr">uniqueItems</entry>
            <entry dir="ltr">An array is valid against this keyword if an item cannot be found more
              than once in the array. The value of this keyword must be a boolean. If set to false
              the keyword validation will be ignored.</entry>
          </row>
          <row>
            <entry dir="ltr">Number/Integer Properties</entry>
            <entry dir="ltr">exclusiveMaximum</entry>
            <entry dir="ltr">A number is valid against this keyword if is strictly lower than the
              value of this keyword. Value of this keyword must be a number (integer or float) or a
              boolean.</entry>
          </row>
          <row>
            <entry morerows="3"/>
            <entry dir="ltr">exclusiveMinimum</entry>
            <entry dir="ltr">A number is valid against this keyword if is strictly greater than the
              value of this keyword. Value of this keyword must be a number (integer or float) or a
              boolean.</entry>
          </row>
          <row>
            <entry dir="ltr">maximum</entry>
            <entry dir="ltr">A number is valid against this keyword if is lower than, or equal to,
              the value of this keyword. Value of this keyword must be a number (integer or
              float).</entry>
          </row>
          <row>
            <entry dir="ltr">minimum</entry>
            <entry dir="ltr">A number is valid against this keyword if is greater than, or equal to,
              the value of this keyword. Value of this keyword must be a number (integer or
              float).</entry>
          </row>
          <row>
            <entry dir="ltr">multipleOf</entry>
            <entry dir="ltr">A number is valid against this keyword if the division between the
              number and the the value of this keyword results in an integer. Value of this keyword
              must be a strictly positive number (zero is not allowed).</entry>
          </row>
          <row>
            <entry dir="ltr">String Properties</entry>
            <entry dir="ltr">contentEncoding</entry>
            <entry dir="ltr">A string is valid against this keyword if it is encoded using the
              method indicated by the value of this keyword. Value of this keyword must be a
              string.</entry>
          </row>
          <row>
            <entry morerows="4"/>
            <entry dir="ltr">contentMediaType</entry>
            <entry dir="ltr">A string is valid against this keyword if its content has the media
              type (MIME type) indicated by the value of this keyword. If the contentEncoding
              keyword is also specified, then the decoded content must have the indicated media
              type. Value of this keyword must be a string.</entry>
          </row>
          <row>
            <entry dir="ltr">format</entry>
            <entry dir="ltr">The format keyword performs a semantic validation on data. The value of
              this keyword must be a string, representing a format. The keyword behavior depends on
              the data type, meaning that the same format name for a string behaves differently on a
              number, or is missing, because not all data types must implement a format and usually
              different data types have different formats.</entry>
          </row>
          <row>
            <entry dir="ltr">maxLength</entry>
            <entry dir="ltr">A string is valid against this keyword if its length is lower then, or
              equal to, the value of this keyword. Value of this keyword must be a non-negative
              integer.</entry>
          </row>
          <row>
            <entry dir="ltr">minLength</entry>
            <entry dir="ltr">A string is valid against this keyword if its length is greater then,
              or equal to, the value of this keyword. Value of this keyword must be a non-negative
              integer.</entry>
          </row>
          <row>
            <entry dir="ltr">pattern</entry>
            <entry dir="ltr">A string is valid against this keyword if it matches the regular
              expression specified by the value of this keyword. Value of this keyword must be a
              string representing a valid regular expression.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </body>
</topic>
