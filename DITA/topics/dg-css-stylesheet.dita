<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="dg-css-stylesheet">
  <title>Customizing the CSS and Associating it with an XML Document</title>
  <conbody>
    <p>A set of rules must be defined for describing how the XML document is to be rendered in
        <uicontrol>Author</uicontrol> mode. This is done using Cascading Style Sheets (CSS). CSS is
      a language used to describe how an HTML or XML document should be formatted by a browser. CSS
      is widely used in the majority of websites.</p>
    <p>The elements from an XML document are displayed in the layout as a series of boxes. Some of
      the boxes contain text and may flow one after the other, from left to right. These are called
      inline boxes. There are also other types of boxes that flow one below the other (such as
      paragraphs). These are called block boxes.</p>
    <p>For example, consider the way a traditional text editor arranges the text. A paragraph is a
      block, because it contains a vertical list of lines. The lines are also blocks. However,
      blocks that contain inline boxes arrange its children in a horizontal flow. That is why the
      paragraph lines are also blocks, while the traditional "bold" and "italic" sections are
      represented as inline boxes.</p>
    <p>The CSS allows us to specify that some elements are displayed as tables. In CSS, a table is a
      complex structure and consists of rows and cells. The <codeph>table</codeph> element must have
      children that have a <i>table-row</i> style. Similarly, the <codeph>row</codeph> elements must
      contain elements with a <i>table-cell</i> style.</p>
    <p>To make it easy to understand, the following section describes how each element from a schema
      is formatted using a CSS file. Note that this is just one of infinite possibilities for
      formatting the content.</p>
    <p>
      <dl>
        <dlentry>
          <dt><codeph>report</codeph></dt>
          <dd>
            <p>This element is the root element of a report document. It should be rendered as a box
              that contains all other elements. To achieve this the display type is set to
                <b>block</b>. Additionally, some margins are set for it. The CSS rule that matches
              this element
              is:<codeblock outputclass="language-css">report{
    display:block;
    margin:1em;
}</codeblock></p>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>title</codeph></dt>
          <dd>
            <p>The title of the report. Usually titles have a large font. The <b>block</b> display
              is used so that the subsequent elements will be placed below it, and its font is
              changed to double the size of the normal text.</p>
            <codeblock outputclass="language-css">title {
    display:block;
    font-size:2em;    
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>description</codeph></dt>
          <dd>
            <p>This element contains several lines of text describing the report. The lines of text
              are displayed one below the other, so the description has the <b>block</b> display.
              Also, the background color is changed to make it standout.</p>
            <codeblock outputclass="language-css">description {
    display:block;
    background-color:#EEEEFF;
    color:black;
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>line</codeph></dt>
          <dd>
            <p>A line of text in the description. A specific aspect is not defined and it just
              indicates that the display should be <b>block</b> style.</p>
            <codeblock outputclass="language-css">line {
    display:block;
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>important</codeph></dt>
          <dd>
            <p>The <codeph>important</codeph> element defines important text from the description.
              Since it can be mixed with text, its display property must be set to <b>inline</b>.
              Also, the text is emphasized with <b>bold</b>to make it easier to spot.</p>
            <codeblock outputclass="language-css">important {
    display:inline;
    font-weight:bold;
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>results</codeph></dt>
          <dd>
            <p>The <codeph>results</codeph> element displays the list of <term>test_names</term> and
              the results for each one. To make it easier to read, it is displayed as a
              <b>table</b>, with a green border and margins.</p>
            <codeblock outputclass="language-css">results{
    display:table;
    margin:2em;
    border:1px solid green;
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>entry</codeph></dt>
          <dd>
            <p>An item in the results element. The results are displayed as a table so the entry is
              a row in the table. Thus, the display is <b>table-row</b>.</p>
            <codeblock outputclass="language-css">entry {
    display:table-row;
}</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt><codeph>test_name</codeph>, <codeph>passed</codeph></dt>
          <dd>
            <p>The name of the individual test, and its result. They are cells in the results table
              with the display set to <b>table-cell</b>. Padding and a border are added to emphasize
              the table grid.</p>
            <codeblock outputclass="language-css">
test_name, passed{
    display:table-cell;
    border:1px solid green;
    padding:20px;
}

passed{
    font-weight:bold;
}</codeblock>
          </dd>
        </dlentry>
      </dl>
    </p>
    <p>The full content of the CSS file <filepath>test_report.css</filepath> is:</p>
    <codeblock outputclass="language-css">
report {
    display:block;
    margin:1em;
}

description {
    display:block;
    background-color:#EEEEFF;
    color:black;
}

line {
    display:block;
}

important {
    display:inline;
    font-weight:bold;
}

title {
    display:block;
    font-size:2em;    
}

results{
    display:table;
    margin:2em;       
    border:1px solid green;
}

entry {
    display:table-row;
}

test_name, passed{
    display:table-cell;
    border:1px solid green;
    padding:20px;
}

passed{
    font-weight:bold;
}                        </codeblock>
    <p>
      <fig>
        <title>Report Rendered in <uicontrol>Author</uicontrol> Mode</title>
        <image href="../img/dg_sample_reports.png"/>
      </fig>
    </p>
    <note>You can edit attributes in-place in the <uicontrol>Author</uicontrol> mode using <xref
        href="editing-attributes-author-mode.dita">form-based controls</xref>.</note>
    <section product="author editor authorEclipse editorEclipse" id="d2e258">
      <title>Associating a Stylesheet with an XML Document</title>
      <p>The rendering of an XML document in the <uicontrol>Author</uicontrol> mode is driven by a
        CSS stylesheet that conforms to the <xref href="http://www.w3.org/TR/CSS21/"
          scope="external" format="html">version 2.1 of the CSS specification</xref> from the W3C
        consortium. Some CSS 3 features, such as namespaces and custom extensions, of the CSS
        specification are also supported.<ph product="author editor">
          <ph keyref="product"/> also supports stylesheets coded with the LESS dynamic stylesheet
          language.</ph></p>
      <p>There are several methods for associating a stylesheet (CSS<ph product="author editor"> or
          LESS</ph>) with an XML document:<ol id="ol_b5t_bjj_lq">
          <li>Insert the <codeph>xml-stylesheet</codeph> processing instruction with the
              <codeph>type</codeph> attribute at the beginning of the XML document. If you do not
            want to alter your XML documents, <xref
              href="dg-author-settings.dita#dg-author-settings">you should create a new document
              type (<term>framework</term>)</xref>.<p>CSS
              example:<codeblock outputclass="language-css">&lt;?xml-stylesheet type="text/css" href="test.css"?></codeblock></p><p
              product="author editor">LESS
              example:<codeblock outputclass="language-css">&lt;?xml-stylesheet type="text/css" href="test.less"?> </codeblock></p><note>XHTML
              documents need a <codeph>link</codeph> element, with the <codeph>href</codeph> and
                <codeph>type</codeph> attributes in the <codeph>head</codeph> child element, as
              specified in the <xref
                href="http://www.w3.org/TR/REC-html40/present/styles.html#h-14.3.2" scope="external"
                format="html">W3C stylesheet specification</xref>. XHTML example:<p>
                <codeblock outputclass="language-xml">&lt;link href="/style/screen.css" rel="stylesheet" type="text/css"/></codeblock>
              </p></note><note type="tip">You can also insert the <codeph>xml-stylesheet</codeph>
              processing instruction by using the <uicontrol><image
                  href="../img/AssociateXsltStylesheet16.png"/>Associate XSLT/CSS
                Stylesheet</uicontrol> action that is available on the toolbar or in the
                <menucascade product="author editor">
                <uicontrol>Document</uicontrol>
                <uicontrol>XML Document</uicontrol>
              </menucascade><uicontrol product="authorEclipse editorEclipse">XML</uicontrol>
              menu.</note></li>
          <li>Add a new CSS <ph product="author editor">or LESS</ph> file to a <xref
              keyref="glossentry_framework"><term>framework</term></xref> (document type). To do so,
              <ph conkeyref="reusables-preferences-pages/open-the-preferences-page"/> and go to
              <uicontrol>Document Type Association</uicontrol>. Edit the appropriate
              <term>framework</term>, open the <uicontrol>Author</uicontrol> tab, then the
              <uicontrol>CSS</uicontrol> subtab. Press the <uicontrol><image href="../img/Add16.png"
              />New</uicontrol> button to add a new CSS <ph product="author editor">or LESS
              </ph>file.<note>The built-in <term>frameworks</term> are read-only, so you need to
                <xref
                href="preferences-document-type-association.dita#preferences-document-type-association/extend"
                  ><uicontrol>Extend</uicontrol></xref> or <xref
                href="preferences-document-type-association.dita#preferences-document-type-association/duplicate"
                  ><uicontrol>Duplicate</uicontrol></xref> them to configure them as custom
                <term>frameworks</term>.</note></li>
        </ol></p>
      <p>If a document has no CSS association or the referenced stylesheet files cannot be loaded, a
        default one is used. A warning message is also displayed at the beginning of the document,
        presenting the reason why the CSS cannot be loaded.</p>
      <p>
        <fig id="fig_tz3_m43_2s">
          <title>Document with no CSS association default rendering</title>
          <image href="../img/author_no_css.png"/>
        </fig>
      </p>
      <p>For information about associating a CSS to a <term>framework</term> (document type), see
          <xref href="dg-customize-default-CSS.dita"/>.</p>
    </section>
  </conbody>
</concept>
