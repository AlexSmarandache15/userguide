<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="pdf-xslt-extensions-pub-template_usecase_5_sort_and_group_glossentries">
  <title>How to Sort and Group Gloss Entries</title>
  <body>
    <p id="p_bdq_cgk_54b">Suppose that in your PDF output, you want your glossary entries
        (<xmlelement>glossentry</xmlelement>) to be sorted alphabetically and grouped by their first
      letter.</p>
    <p id="p_cdq_cgk_54b">To add this functionality using an <i>Oxygen Publishing Template</i>,
      follow these steps:<ol id="ol_gjr_kq5_njb">
        <li conkeyref="reusables-dcpp/pt-li1" id="li_ddq_cgk_54b"/>
        <li conkeyref="reusables-dcpp/pt-li2" id="li_edq_cgk_54b"/>
        <li conkeyref="reusables-dcpp/pt-li3" id="li_fdq_cgk_54b"/>
        <li id="li_gdq_cgk_54b">In the newly created folder, create an XSL file (for example, named
            <filepath>merged2html5Extension.xsl</filepath>) with the following
          content:<codeblock outputclass="language-xml" id="codeblock_hdq_cgk_54b">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="xs"
  version="2.0">

  &lt;xsl:template match="*[contains(@class, ' glossgroup/glossgroup ')]">
    &lt;!-- Get the original glossgroup node -->
    &lt;xsl:variable name="result">
      &lt;xsl:next-match/>
    &lt;/xsl:variable>
    &lt;xsl:apply-templates select="$result" mode="sort-and-group"/>
  &lt;/xsl:template>

  &lt;xsl:template match="node() | @*" mode="sort-and-group">
    &lt;xsl:copy>
      &lt;xsl:apply-templates select="node() | @*" mode="#current"/>
    &lt;/xsl:copy>
  &lt;/xsl:template>

  &lt;xsl:template match="*[contains(@class, ' glossgroup/glossgroup ')]"
    mode="sort-and-group">
    &lt;!-- Copy the glossgroup -->
    &lt;xsl:copy>
      &lt;!-- Copy the glossgroup attributes -->
      &lt;xsl:copy-of select="@*"/>
      &lt;!-- Copy all glossgroup children except glossentries -->
      &lt;xsl:copy-of 
        select="child::node()[not(contains(@class, ' glossentry/glossentry '))]"/>
      &lt;!-- Group glossentries by glossterm first letter alphabetically -->
      &lt;xsl:for-each-group
        select="*[contains(@class, ' glossentry/glossentry ')]"
        group-by="substring(*[contains(@class, ' glossentry/glossterm ')]
        /node()/text(), 1, 1)">
        &lt;!-- Sort glossentries by glossterm first letter -->
        &lt;xsl:sort select="current-grouping-key()" data-type="text" order="ascending"/>
        &lt;!-- Add div to display first letter -->
        &lt;div class="- glossgroup/label label">
          &lt;xsl:value-of select="current-grouping-key()"/>
        &lt;/div>
        &lt;xsl:for-each select="current-group()">
          &lt;!-- Sort glossentries from the same group by glossterm alphabetically -->
          &lt;xsl:sort select="*[contains(@class, ' glossentry/glossterm ')]
            /node()/text()" data-type="text" order="ascending"/>
          &lt;!-- Copy glossentry and its children -->
          &lt;xsl:copy>
            &lt;xsl:copy-of select="@*"/>
            &lt;xsl:copy-of select="child::node()"/>
          &lt;/xsl:copy>
        &lt;/xsl:for-each>
      &lt;/xsl:for-each-group>
    &lt;/xsl:copy>
  &lt;/xsl:template>

&lt;/xsl:stylesheet></codeblock></li>
        <li id="li_idq_cgk_54b">Open the <xref
            href="pdf_publishing_template_contents.dita#template_descritpor_file_pdf"><i>template
              descriptor file</i></xref> associated with your <i>publishing template</i> (the
            <i>.opt</i> file) and set the XSLT stylesheet created in the previous step with the
            <codeph>com.oxygenxml.pdf.css.xsl.merged2html5</codeph> XSLT extension
          point:<codeblock outputclass="language-xml" id="codeblock_jdq_cgk_54b">&lt;publishing-template&gt;
  ...
  &lt;pdf&gt;
    ...        
    &lt;xslt&gt;
      &lt;extension 
        id="com.oxygenxml.pdf.css.xsl.merged2html5"
        file="xslt/merged2html5Extension.xsl"/&gt;
    &lt;/xslt&gt;</codeblock></li>
        <li id="li_gbq_cgk_54b">Create a <filepath>css</filepath> folder in the publishing template
          directory. In this directory, save a custom CSS file with rules that style the
            <i>glossary</i> structure. For
          example:<codeblock outputclass="language-css" id="codeblock_hbq_cgk_54b">*[class ~= "glossgroup/label"] {
  margin-top: 1em;
  font-weight: bold;
  font-size: 1.5em;
}

*[class ~= "glossentry/glossterm"] {
  margin-left: 1em;
}

*[class ~= "glossentry/glossdef"] {
  margin-left: 2em;
}    </codeblock></li>
        <li id="li_ibq_cgk_54b">Open the <xref
            href="pdf_publishing_template_contents.dita#template_descritpor_file_pdf"><i>template
              descriptor file</i></xref> associated with your <i>publishing template</i> (the
            <filepath>.opt</filepath> file) and reference your custom CSS file in the
            <codeph>resources</codeph>
          element:<codeblock outputclass="language-xml" id="codeblock_jbq_cgk_54b">&lt;publishing-template&gt;
  ...
  &lt;pdf&gt;
    ...                
    &lt;resources&gt;            
      &lt;css file="css/custom.css"/&gt;
    &lt;/resources&gt; </codeblock></li>
        <li conkeyref="reusables-dcpp/pt-li6" id="li_kdq_cgk_54b"/>
        <li conkeyref="reusables-dcpp/pt-li7" id="li_ldq_cgk_54b"/>
        <li conkeyref="reusables-dcpp/pt-li8" id="li_mdq_cgk_54b"/>
      </ol></p>
  </body>
</topic>
