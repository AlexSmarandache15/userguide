<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dg-table-cell-spanning-provider">
  <title>Configuring a Table Cell Span Provider</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Framework customization<indexterm>Extensions<indexterm>Author Table Cell Span
              Provider</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p id="p_fkb_dgk_54b">In a custom <xref keyref="glossentry_framework"><term>framework</term></xref>, the
          <xmlelement>table</xmlelement> element can have cells that span over multiple columns and
        rows. As explained in <xref href="dg-styling-table-element.dita#dg-styling-table-element"/>,
        you need to indicate <ph keyref="product"/> a method to determine the cell spanning. If you
        use the <xmlatt>rowspan</xmlatt> and <xmlatt>colspan</xmlatt> attributes, <ph
          keyref="product"/> can determine the cell spanning automatically. In the following
        example, the <xmlelement>td</xmlelement> element uses the <xmlatt>row_span</xmlatt> and
          <xmlatt>column_span</xmlatt> attributes that are not recognized by default. You will need
        to implement a Java extension class for defining the cell spanning.</p>
    </context>
    <steps>
      <step>
        <cmd>Create the class <i>simple.documentation.framework.TableCellSpanProvider</i>. This
          class must implement the <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/AuthorTableCellSpanProvider.html"
            format="html" scope="external"
              ><i>ro.sync.ecss.extensions.api.AuthorTableCellSpanProvider</i></xref>
          interface.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_gkb_dgk_54b">import ro.sync.ecss.extensions.api.AuthorTableCellSpanProvider;
import ro.sync.ecss.extensions.api.node.AttrValue;
import ro.sync.ecss.extensions.api.node.AuthorElement;

public class TableCellSpanProvider 
      implements AuthorTableCellSpanProvider {</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <i>init</i> method takes <xref
            href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/ecss/extensions/api/node/AuthorElement.html"
            format="html" scope="external"
            ><i>ro.sync.ecss.extensions.api.node.AuthorElement</i></xref> that represents the XML
          <xmlelement>table</xmlelement> element as its argument. In this example, the cell span is
          specified for each of the cells so you leave this method empty. However, there are cases
          (such as the CALS table model) when the cell spanning is specified in the
          <xmlelement>table</xmlelement> element. In such cases, you must collect the span information by
          analyzing the <xmlelement>table</xmlelement> element.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_hkb_dgk_54b">public void init(AuthorElement table) {
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The <i>getColSpan</i> method is taking as argument the table cell. The table layout
          engine will ask this <i>AuthorTableSpanSupport</i> implementation what is the column span
          and the row span for each XML element from the table that was marked as cell in the CSS
          using the property <codeph>display:table-cell</codeph>. The implementation is simple and
          just parses the value of <b>column_span</b> attribute. The method must return
            <codeph>null</codeph> for all the cells that do not change the span specification.</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_ikb_dgk_54b">public Integer getColSpan(AuthorElement cell) {
  Integer colSpan = null;

  AttrValue attrValue = cell.getAttribute("column_span");
  if(attrValue != null) {
    // The attribute was found.
    String cs = attrValue.getValue();
    if(cs != null) {        
      try {
        colSpan = new Integer(cs);
      } catch (NumberFormatException ex) {
        // The attribute value was not a number.
      }     
    }   
  }
  return colSpan;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The row span is determined in a similar manner:</cmd>
        <info>
          <codeblock outputclass="language-java" id="codeblock_jkb_dgk_54b">public Integer getRowSpan(AuthorElement cell) {
  Integer rowSpan = null;

  AttrValue attrValue = cell.getAttribute("row_span");
  if(attrValue != null) {
    // The attribute was found.
    String rs = attrValue.getValue();
    if(rs != null) {        
      try {
        rowSpan = new Integer(rs);
      } catch (NumberFormatException ex) {
        // The attribute value was not a number.
      }     
    }   
  }
  return rowSpan;
}</codeblock>
        </info>
      </step>
      <step>
        <cmd>The method <i>hasColumnSpecifications</i> always returns <codeph>true</codeph>
          considering column specifications always available.</cmd>
        <info>
          <p id="p_kkb_dgk_54b">
            <codeblock outputclass="language-java" id="codeblock_lkb_dgk_54b">public boolean hasColumnSpecifications(AuthorElement tableElement) {
  return true;
}</codeblock>
          </p>
          <note conkeyref="reusable_notes_java-files/sdf_project" id="note_mkb_dgk_54b"/>
        </info>
      </step>
      <step>
        <cmd>In the listing below, the XML document contains the table element:</cmd>
        <info>
          <codeblock outputclass="language-xml" id="codeblock_nkb_dgk_54b">&lt;table&gt;
    &lt;header&gt;
        &lt;td&gt;C1&lt;/td&gt;
        &lt;td&gt;C2&lt;/td&gt;
        &lt;td&gt;C3&lt;/td&gt;
        &lt;td&gt;C4&lt;/td&gt;
    &lt;/header&gt;
    &lt;tr&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
        &lt;td column_span="2" row_span="2"&gt;cs=2, rs=2&lt;/td&gt;
        &lt;td row_span="3"&gt;cs=1, rs=3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;cs=1, rs=1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td column_span="3"&gt;cs=3, rs=1&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</codeblock>
        </info>
      </step>
    </steps>
    <result>
      <p id="p_okb_dgk_54b">When no table cell span provider is specified, the table has the following layout:</p>
      <p id="p_pkb_dgk_54b">
        <fig id="fig_qkb_dgk_54b">
          <title>Table layout when no cell span provider is specified</title>
          <image href="../img/dg_table_no_span_provider.png"/>
        </fig>
      </p>
      <p id="p_rkb_dgk_54b">When the above implementation is configured, the table has the correct layout:</p>
      <p id="p_skb_dgk_54b">
        <fig id="fig_tkb_dgk_54b">
          <title>Cells spanning multiple rows and columns.</title>
          <image href="../img/dg_cells_spanning_multiple_rows_and_cols.png"/>
        </fig>
      </p>
      <note conkeyref="reusable_notes_java-files/sdf_project" id="note_ukb_dgk_54b"/>
    </result>
  </taskbody>
</task>
