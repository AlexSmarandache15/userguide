<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="customizing_plugins">
  <title>Customizing <ph keyref="webappProduct"/> Plugins</title>
  <shortdesc>The <ph keyref="webappProduct"/> server side can be customized with a variety of
    plugin types.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Web Author Component<indexterm>Customize
          plugins</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>We currently provide support for the following extension types: </p>
    <ul id="ol_dn1_c23_br">
      <li><b>URLStreamHandler</b> - This extensions can be used to integrate the <ph
          keyref="webappProduct"/> with XML databases or CMS. There is an example URLStreamHandler
        provided in <xref href="https://www.oxygenxml.com/oxygen_sdk_maven.html" format="html"
          scope="external">oXygen XML SDK project</xref> in the
          <filepath>oxygen-sample-plugins/oxygen-sample-plugin-custom-protocol</filepath> folder.
        The extension uses the <b>cproto</b> protocol to access the file system of the server and
        can be used as a starting point.<note>For more details about implementing an authentication
          mechanism, see <xref href="how_to_cms_auth.dita"/>.</note></li>
      <li><b>WorkspaceAccess</b> - Most of the methods used to configure the <ph keyref="product"/>
        GUI are unavailable in theses extensions, but they can still be used, for example, to
        configure a <codeph>javax.xml.transform.URIResolver</codeph>. <note>The <xref
            keyref="url_PluginWorkspace"
              ><apiname>ro.sync.exml.workspace.api.PluginWorkspace</apiname></xref> instance passed
          to the extension also implements the <xref keyref="url_WebappPLuginWorkspace"
              ><apiname>ro.sync.ecss.extensions.api.webapp.access.WebappPluginWorkspace</apiname></xref>
          interface and provides access to some <ph keyref="webappProduct"/>-specific
          functionality.</note></li>
      <li><b>WebappServlet</b> - This extension allows you to provide an implementation of a
        servlet-like interface (<xref keyref="url_WebappServletPluginExtension"
            ><apiname>ro.sync.ecss.extensions.api.webapp.plugin.WebappServletPluginExtension</apiname></xref>)
        that will be dynamically loaded by the <ph keyref="webappProduct"/>. Your implementation
        will also provide the path to the location where the servlet will be exposed.</li>
      <li><xref href="author-stylesheet-extension.dita#author-stylesheet-extension"
            ><b>AuthorStylesheet</b></xref> - Allows you to add a stylesheet (CSS or LESS) used for
        rendering all XML documents.</li>
      <li>
        <b>WebappStaticResourcesFolder</b> - This extension allows you to access a static resource
        folder. It should provide a <codeph>path</codeph> attribute (the static resources folder
        path relative to the plugin directory) and an <codeph>href</codeph> attribute that declares
        the plugin. An example of a use-case is you can use it to have the <ph
          keyref="webappProduct"/> provide icons for plugin-specific actions.<p>In the following
          example, the static resources will be available at <filepath><term
              conkeyref="reusables-user-guide/oxy-webapp-install-dir"
            />/plugin-resources/relative-href/path-to-file</filepath>, with the
            <filepath>path-to-file</filepath> being relative to the static resources folder:
          <screen outputclass="language-javascript">&lt;extension type="WebappStaticResourcesFolder" path="path-to-resorce-folder" href="relative-href"/></screen></p></li>
    </ul>
    <section id="webapp_bundle_js_files_in_plugin">
      <title>Loading plugin-related custom JavaScript code</title>
      <p>If your plugin needs accompanying JavaScript code to be loaded and executed on the
        client-side you can bundle it together with your plugin code. The <ph
          keyref="webappProduct"/> loads all files with the <filepath>.js</filepath> extension
        located in the <filepath>web</filepath> folder of the plugin.</p>
    </section>
    <section id="add-plugin-section">
      <title>Adding the Plugins in the <ph keyref="webappProduct"/></title>
      <p>If you have already developed such <ph keyref="product"/> plugins, they can be added in the
          <filepath>bundle-plugin/dropins</filepath> folder in the Maven project.</p>
      <p>If you are developing a new <ph keyref="product"/> plugin you are encouraged to use as a
        starting point any of the existing plugins. Then you should add the resulting Maven project
        as a dependency (or even a sub-module) in the <filepath>oxygen-sample-plugins</filepath>
        module.</p>
    </section>
    <section id="public_plugin_integration_projects">
      <title>Public Plugin Integration Projects</title>
      <p>Some public projects are available on github.com that can be used to help you integrate <ph
          keyref="webappProduct"/>. The following plugin projects are available:<ul>
          <li><b><ph keyref="webappProduct"/> GitHub Connector</b> (<xref
              href="https://github.com/oxygenxml/webapp-github-plugin" format="html"
              scope="external"/>) - This plugin enables <ph keyref="webappProduct"/> to open and
            commit files on GitHub.</li>
          <li><b>WebDAV Server Plugin for <ph keyref="webappProduct"/></b> (<xref
              href="https://github.com/oxygenxml/webapp-webdav-server" format="html"
              scope="external"/>) - This project is a simple <ph keyref="webappProduct"/> plugin
            that provides a WebDAV-enabled workspace by registering the Tomcat built-in WebDAV
            servlet to manage a folder.</li>
          <li><b><b>WebDAV Support for oXygen XML Web Author</b></b> (<xref
              href="https://github.com/oxygenxml/webapp-webdav-integration" format="html"
              scope="external"/>) - This project is a very simple integration of <ph
              keyref="webappProduct"/> with a WebDAV-enabled server, which can be extended with more
            features or can be adapted to work with any CMS.</li>
        </ul></p>
    </section>
    
  </body>
  <related-links>
    <link href="../tasks/webapp-plugin-prototyping.dita#webapp-plugin-prototyping"/>
    <link href="webapp-configure-plugins.dita#webapp-configure-plugins"/>
  </related-links>
</topic>
