<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ch_changing_labels_depending_on_language">
  <title>Changing Labels Depending on Language</title>
  <body>
    <p>When developing a CSS that will apply to output localized to a number of countries, you must
      take into account changing the static text (CSS generated) depending on the language. </p>
    <note>Your document must use the <codeph>xml:lang</codeph> or <codeph>lang</codeph> attributes
      to specify the content language, ideally on the root element. The value must be specified
      using a language identifier, like "en", "en-US", "en-CA", "fr", "fr-CA".</note>
    <p>Consider a case in which all the chapter titles are prefixes with the word "Chapter",
      followed by the figure counter. Depending on the language of the XML/HTML document, you need
      this word to change to: "Kapitel" for German, or to "Chapitre" for French. </p>
    <codeblock outputclass="language-xml">&lt;div class='chp'>
    &lt;h2>Introduction&lt;/h2>
... 
&lt;/dif></codeblock>
    <p>The CSS may be written starting with a default rule that will be used when the content has
      other language than the ones we are expecting. This rules will be used also for English
      content:</p>
    <codeblock outputclass="language-css">div.chp > h2:before{
    content: "Chapter " counter(chp);
}</codeblock>
    <p>Next, we write rules for each of the languages.</p>
    <codeblock outputclass="language-css">div.chp > h2:lang(de):before{
    content: "Kapitel " counter(chp);
}
div.chp > h2:lang(fr):before{
    content: "Chapitre " counter(chp);
}</codeblock>
    <p>A good practice is to keep all the static text for a specific language in a separate CSS. </p>
    <p>To make easier the maintenance, we can separate the strings from the counter value, using one
      of the advanced features of <ph keyref="product"/>, the :before and :after pseudo elements
      with <xref href="ch_multiple_before_after_pseudo_elements.dita">multiple levels</xref>. So we
      write the default rule as:</p>
    <codeblock outputclass="language-css">div.chp > h2:before(2){
    content: "Chapter ";
}
div.chp > h2:before(1){
    content: counter(chp);
}</codeblock>
    <p>Now, the more specific rules are simpler:</p>
    <codeblock outputclass="language-css">div.chp > h2:lang(de):before(2){
    content: "Kapitel ";
}
div.chp > h2:lang(fr):before(2){
    content: "Chapitre ";
}</codeblock>
    <note>The multiple level pseudo elements is a non standard feature, and might not work if you
      switch to other processor.</note>
  </body>
</topic>
