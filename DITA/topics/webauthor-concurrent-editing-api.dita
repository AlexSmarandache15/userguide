<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="webauthor-concurrent-editing-api">
  <title>Integrating Concurrent Editing</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Enabling shared session</indexterm>
        <indexterm>Enabling concurrent editing</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_wbt_dgk_54b"><ph keyref="webappProduct"/> offers a feature that can be enabled to provide the <xref
        href="https://www.oxygenxml.com/doc/ug-webauthor/topics/webauthor-concurrent-editing.html"
        format="html" scope="external">ability for teams to edit and review content
        concurrently</xref>. A user can share their editing session by using the <uicontrol><image
          href="../img/wa-share-session-button.png" id="image_kyj_315_rnb"/>Share
        Session</uicontrol> toolbar button and then sending the retrieved URL to other collaborators
      and then all of them can edit and review the same document simultaneously.</p>
  </body>
  <topic id="topic_k2k_qgt_rnb">
    <title>Enabling the Share Session Action</title>
    <body>
      <p id="p_xbt_dgk_54b">To enable the <uicontrol><image href="../img/wa-share-session-button.png"
            id="image_fvg_w15_rnb"/>Share Session</uicontrol> action, the following conditions must
        be met:</p>
      <p id="p_ybt_dgk_54b">
        <ul id="ul_s3b_yk4_snb">
          <li id="li_zbt_dgk_54b">The <uicontrol>Concurrent Editing Plugin</uicontrol> must be installed. It can be
            found in the <xref
              href="https://www.oxygenxml.com/xml_web_author/web_author_plugins.html" format="html"
              scope="external"><menucascade>
                <uicontrol>Download</uicontrol>
                <uicontrol>Connectors/Plugins</uicontrol>
              </menucascade> webpage</xref>. Make sure that you read and understand the terms and
            conditions of its end-user license agreement.</li>
          <li id="li_act_dgk_54b">The <codeph>sharedSessionCompatible</codeph>
            <xref keyref="jscript_api_workspace_LoadingOptions">loading option</xref> is set to
              <codeph>true</codeph> by the CMS connector plugin.</li>
        </ul>
      </p>
      <p id="p_bct_dgk_54b">For the feature to work correctly, when a concurrent session is active, the CMS connector
        plugin should ensure that:</p>
      <ul id="ul_aq3_jgt_rnb">
        <li id="li_cct_dgk_54b">Any save/commit action is disabled for session guests.</li>
        <li id="li_dct_dgk_54b">Any check-in/check-out actions are disabled for session guests.</li>
        <li id="li_ect_dgk_54b">The document is editable for guests even though they do not have a lock for it.</li>
      </ul>
      <p id="p_fct_dgk_54b">To detect that a user is a <i>guest</i>, you can use the following JavaScript
        code:<codeblock outputclass="language-javascript" id="codeblock_gct_dgk_54b">var mgr = editor.getEditingSupport().getConcurrentEditingManager();    
if (mgr &amp;&amp; !mgr.isCreator()) {      
      ...
} </codeblock></p>
      <note type="other" othertype="Important Notes About Concurrent Editing for Integrators"
        id="note_hct_dgk_54b">
        <ul id="ul_r51_fc5_rnb">
          <li id="li_ict_dgk_54b">Concurrent editing does not work if <ph keyref="webappProduct"/>
            is deployed on multiple servers behind a <xref href="webapp-loadbalancing.dita">load
              balancer</xref>.</li>
          <li id="li_jct_dgk_54b">
            <p id="p_kct_dgk_54b"><ph keyref="webappProduct"/> uses Web Sockets to propagate changes
              in real time between collaborators. If you are using a reverse proxy, some additional
              configuration may be required to enable Web Socket connections to the
                <codeph>./ws</codeph> endpoint of the application.</p>
            <p id="p_lct_dgk_54b">For example, NGINX requires the following configuration for the
                <filepath>/oxygen-xml-web-author/ws</filepath>
              path:<codeblock outputclass="language-javascript" id="codeblock_mct_dgk_54b">location /oxygen-xml-web-author/ws {
  proxy_http_version 1.1;
      
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection "upgrade";
  proxy_set_header Host $host;
      
  proxy_pass "http://web-author:8080/oxygen-xml-web-author/ws";
}</codeblock></p>
            <p id="p_nct_dgk_54b">As another example, when using Apache HTTP server as a reverse
              proxy, a system administrator needs to enable the following modules:</p>
            <ul id="ul_gp2_zl4_snb">
              <li id="li_oct_dgk_54b">
                <p id="p_pct_dgk_54b"><codeph>rewrite</codeph></p>
              </li>
              <li id="li_qct_dgk_54b">
                <p id="p_rct_dgk_54b"><codeph>proxy_http</codeph></p>
              </li>
              <li id="li_sct_dgk_54b">
                <p id="p_tct_dgk_54b"><codeph>proxy_wstunnel</codeph>
                </p>
              </li>
            </ul>
            <p id="p_uct_dgk_54b">Also, a configuration similar to the one below should be
              added:<codeblock outputclass="" id="codeblock_vct_dgk_54b">ProxyPass /oxygen-xml-web-author http://&lt;internal-host>:8080/oxygen-xml-web-author
ProxyPassReverse /oxygen-xml-web-author http://&lt;internal-host>:8080/oxygen-xml-web-author

RewriteEngine on
RewriteCond %{​HTTP:Upgrade}​ websocket [NC]
RewriteCond %{​HTTP:Connection}​ upgrade [NC]
RewriteRule ^/oxygen-xml-web-author/?(.*) 
 "ws://&lt;internal-host>:8080/oxygen-xml-web-author/$1" [P,L]</codeblock></p>
          </li>
          <li id="li_oxj_sb2_tpb">The <codeph>onChange</codeph> property for the <xref
              href="https://www.oxygenxml.com/doc/ug-editor/topics/combo-box-editor.html"
              format="html" scope="external">combo box form control</xref> is not supported in
            concurrent editing sessions.</li>
        </ul>
      </note>
      <section id="section_mnm_x25_rnb">
        <title>Disabling the Share Session Action</title>
        <p id="p_xct_dgk_54b">To remove the <uicontrol><image href="../img/wa-share-session-button.png"
              id="image_vv2_c25_rnb"/>Share Session</uicontrol> action from the toolbar, simply
          disable the <uicontrol>Concurrent Editing Plugin</uicontrol> in the <xref
            href="webapp-admin-page.dita#webapp-admin-page">Administration Page</xref>.</p>
      </section>
    </body>
  </topic>
  <topic id="topic_n2z_sgt_rnb">
    <title>CMS-owned Concurrent Editing Sessions</title>
    <body>
      <p id="p_yct_dgk_54b">Aside from using the <uicontrol><image href="../img/wa-share-session-button.png"
            id="image_txt_2f5_rnb"/>Share Session</uicontrol> action, a more integrated concurrent
        editing approach is to have a concurrent editing room owned by the CMS. </p>
      <p id="p_zct_dgk_54b">The CMS should be responsible for:<ul id="ul_sht_mgt_rnb">
          <li id="li_adt_dgk_54b">Ensuring that aside from the Web Author users, no other users are modifying the file.
            The CMS can use a "service" account to hold the "lock" on the edited file, or to do a
            check-out.</li>
          <li id="li_bdt_dgk_54b">Creating the concurrent editing room.</li>
          <li id="li_cdt_dgk_54b">Enabling users to join the room.</li>
          <li id="li_ddt_dgk_54b">Specifying the Save Strategy </li>
          <li id="li_edt_dgk_54b">Closing the room.</li>
        </ul></p>
      <section id="section_evc_zgt_rnb">
        <title>Creating a Concurrent Editing Room</title>
        <p id="p_fdt_dgk_54b">The CMS can use the following JavaScript code to create a concurrent editing
          <i>room</i>:<codeblock outputclass="language-javascript" id="codeblock_gdt_dgk_54b">editor.getEditingSupport().getConcurrentEditingManager().createRoom().then(roomId =>
window.open(window.location.href + '&amp;roomId=' + roomId))</codeblock></p>
        <p id="p_hdt_dgk_54b">The ID of the room can then be shared with other users. To join an existing room, the
            <codeph>roomId</codeph> URL parameter can be used.</p>
        <p id="p_idt_dgk_54b">By using the Java API, a room can be created like this:</p>
        <codeblock outputclass="language-javascript" id="codeblock_jdt_dgk_54b">String roomId = RoomsManager.INSTANCE.createRoomFromDocument(AuthorDocumentModel) </codeblock>
        <p id="p_kdt_dgk_54b">This code can be used during the editor loading on the following callbacks:</p>
        <ul id="ul_vw1_mht_rnb">
          <li id="li_ldt_dgk_54b"><codeph>ro.sync.ecss.extensions.api.webapp.access.WebappEditingSessionLifecycleListener.editingSessionAboutToBeStarted()</codeph>.
            In this case, the room ID has to be added to the <codeph>sessionAttributes</codeph> map
            using the <codeph>ro.sync.ecss.extensions.api.webapp.ce.Room.ROOM_ID_ATTRIBUTE</codeph>
            key.</li>
          <li id="li_mdt_dgk_54b"><codeph>ro.sync.ecss.extensions.api.webapp.access.WebappEditingSessionLifecycleListener.editingSessionStarted()</codeph>.
            In this case, the room ID has to be added as an attribute to the editing context of the
            current document using
              <codeph>ro.sync.ecss.extensions.api.webapp.ce.Room.ROOM_ID_ATTRIBUTE</codeph> as the
            name. The editing context can be obtained by calling:
              <codeph>authorDocumentModel.getAuthorAccess().getEditorAccess().getEditingContext()</codeph>.</li>
        </ul>
      </section>
      <section id="section_jkr_4ht_rnb">
        <title>Saving a Concurrently Edited Session</title>
        <p>When having to save a concurrently edited document, the application uses a so-called
            <i>save strategy</i> that  can be specified when creating the room by calling
            <codeph>ro.sync.ecss.extensions.api.webapp.ce.RoomFactory.createRoom(AuthorDocumentModel,
            SaveStrategy)</codeph>.</p>
        <p>The save strategy decides if the application writes to the CMS the document containing
          edits for each peer individually or if should group all changes and write only once to
          save all changes made from the last save. Additionally it provides the
            <codeph>URLConnection</codeph> on whose <codeph>OutputStream</codeph> the changes from
          an author or from a list of author are written.</p>
        <p>There are two base classes that shall be extended:<ol id="ol_jt4_v2z_ypb">
            <li><codeph>ro.sync.ecss.extensions.api.webapp.ce.GroupChangesForSinglePeerStrategy</codeph><p>It
                facilitates tracking precise authorship of changes, each written revision containing
                changes by only one author.</p><p>Note that the <codeph>URLConnection
                  openConnection(URL documentUrl, PeerContext author)</codeph> method has only one
                peer involved, being both the author and the committer.</p></li>
            <li><codeph>ro.sync.ecss.extensions.api.webapp.ce.GroupChangesForMultiplePeersStrategy</codeph><p>It
                facilitates a minimum number of writes to the file server per save.</p><p>Note that
                the <codeph>URLConnection openConnection(URL documentUrl, PeerContext committer,
                  List&lt;PeerContext> authors)</codeph> method has a committer and a list of
                authors, whose changes are grouped together.</p></li>
          </ol></p>
      </section>
      <section id="section_wfk_qht_rnb">
        <title>Enabling Users to Join a Room</title>
        <p id="p_sdt_dgk_54b">To enable users to join a room, there are several options:</p>
        <ul id="ul_jmz_rht_rnb">
          <li id="li_tdt_dgk_54b">Add <codeph>roomId=&lt;the-id></codeph> as a URL parameter.</li>
          <li id="li_udt_dgk_54b">Add <codeph>roomId=&lt;the-id></codeph> as a <xref
              href="web_author_api_concepts.dita#web_author_api_concepts/loading-option">loading
              option</xref> in a JavaScript plugin.</li>
          <li id="li_vdt_dgk_54b">Set <codeph>roomId=&lt;the-id></codeph> as a session attribute in one of the following
            Java listeners:<ul id="ul_kmz_rht_rnb">
              <li id="li_wdt_dgk_54b"><codeph>ro.sync.ecss.extensions.api.webapp.access.WebappEditingSessionLifecycleListener.editingSessionAboutToBeStarted()</codeph></li>
              <li id="li_xdt_dgk_54b"><codeph>ro.sync.ecss.extensions.api.webapp.access.WebappEditingSessionLifecycleListener.editingSessionStarted()</codeph></li>
            </ul></li>
        </ul>
      </section>
      <section id="section_anj_sht_rnb">
        <title>Closing the Room</title>
        <p id="p_ydt_dgk_54b">A room created this way is not closed when the last user leaves. It should be closed
          using <codeph>Room.close()</codeph> when all the users have left and all the changes are
          saved.</p>
      </section>
    </body>
    <related-links>
        <link format="html"
          href="https://github.com/oxygenxml/web-author-sample-plugins/tree/master/web-author-rooms-manager-plugin"
          scope="external">
          <linktext>Open Source Sample Room Manager Plugin</linktext>
        </link>
        <link
          href="https://github.com/oxygenxml/web-author-sample-plugins/tree/master/web-author-rooms-saver-sample-plugin"
          format="html" scope="external">
          <linktext>Open Source Sample Plugin for Saving Content in a Concurrent Editing
            Room</linktext>
        </link>
    </related-links>
  </topic>
</topic>
