<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="customizing_frameworks">
  <title>Customizing <ph keyref="webappProduct"/>
    <?oxy_delete author="Cristian Talau" timestamp="20170526T082257+0000" content="Frameworks"?><?oxy_insert_start author="Cristian Talau" timestamp="20170526T082258+0000"?>
    for your content.<?oxy_insert_end?></title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Web Author Component<indexterm>Customize
          frameworks</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <?oxy_insert_start author="Cristian Talau" timestamp="20170526T082050+0000"?>
    <section id="section_jqs_3sf_11b">
      <title>Framework customization use-cases</title>
      <p>
        <dl>
          <dlentry>
            <dt>Document schema</dt>
            <dd>You can, for example customize Web Author to work with a DITA specialization</dd>
          </dlentry>
          <dlentry>
            <dt>Authoring experience</dt>
            <dd>You can configure the Web Author rendering of the document or make it display inline
              form-controls to edit attribute values.</dd>
          </dlentry>
          <dlentry>
            <dt>Business rules</dt>
            <dd>You can configure the automatic validation to use Schematron to enforce various
              business rules and propose solutions for them.</dd>
          </dlentry>
          <dlentry>
            <dt>File templates</dt>
            <dd>You can specify document templates users will choose from when creating a new
              document.</dd>
          </dlentry>
          <dlentry>
            <dt>Add support for a new XML vocabulary</dt>
            <dd>You can customize Web Author to work with any XML-based document type.</dd>
          </dlentry>
        </dl>
      </p>
    </section>
    <?oxy_insert_end?>
    <p><?oxy_comment_start author="Cristian Talau" timestamp="20170526T082229+0000" comment="Include this paragraph in a section. The title should be something like: &quot;Reusing frameworks between oXygen versions&quot;"?>Custom<?oxy_comment_end?>
      <xref keyref="glossentry_framework"><term>frameworks</term></xref> that are designed for
      documentation purposes can be reused interchangeably between Oxygen standalone distributions
      and the <ph keyref="webappProduct"/>. However, some fine-tuning might be necessary to maximize
      the editing experience for your content authors. The advantages of using a common
        <term>framework</term> include:<ul id="ul_rlf_yvy_1r">
        <li>Uniform experience across multiple <ph keyref="product"/> distributions.</li>
        <li>Ability to reuse previously developed <term>frameworks</term>.</li>
        <li>Many of the customized items that are added to your <term>framework</term> in the <ph
            keyref="product"/> standalone distribution also carry over to <ph keyref="webappProduct"
          />. For example, items that are added to the list of proposals for the <xref
            keyref="glossentry_content-completion-assistant"><term>Content Completion
              Assistant</term></xref> will appear in both distributions.</li>
      </ul></p>
    <section id="section_zzf_pns_vz">
      <title>How to Create a Customized Framework (Document Type)</title>
      <p>You can create a custom <term>framework</term> by extending an existing one: </p>
      <p>
        <ol>
          <li>In a location where you have full write access, create a folder structure similar to
            this: <filepath>custom_frameworks/dita-extension</filepath>. </li>
          <?oxy_insert_start author="Cristian Talau" timestamp="20170526T074722+0000"?>
          <li>Open <ph keyref="product"/>.</li>
          <?oxy_insert_end?>
          <li><ph conkeyref="reusables-preferences-pages/Open-the-preferences-page"/> and go to
              <xref href="framework-location.dita#framework-location"><menucascade>
                <uicontrol>Document Type Association</uicontrol>
                <uicontrol>Locations</uicontrol>
              </menucascade></xref>. In this preferences page, add the path to your
              <filepath>custom_frameworks</filepath> folder in the <uicontrol>Additional frameworks
              directories</uicontrol> list.</li>
          <li>Go to the <ph
              conkeyref="reusables-preferences-pages/preferences-document-type-association"/> and
            select an existing <term>framework</term> configuration and use the
              <uicontrol>Extend</uicontrol> button to create an extension for it.</li>
          <li>Give the extension an appropriate name (for example, <userinput>DITA -
              Custom</userinput>), select <uicontrol>External</uicontrol> for the
              <uicontrol>Storage</uicontrol> option, and specify an appropriate path (for example,
              <filepath>path/to/.../custom_frameworks/dita-extension/dita-extension.framework</filepath>).</li>
          <li id="make-changes-li">Make your changes to the extension. There is a large variety of
            ways to customize your extended <term>framework</term>. These are just some of the ways:<ul>
              <li>The <xref href="the-document-type-dialog.dita#the-document-type-dialog"
                    ><uicontrol>Document Type</uicontrol> configuration dialog box</xref> contains
                various tabs and subtabs that allow you to configure the extended
                  <term>framework</term>.</li>
              <li>See the <xref
                  href="dg-complex-customization-tutorial.dita#dg-complex-customization-tutorial"/>
                section for numerous procedures and examples of how to configure various aspects of
                the extended <term>framework</term>.</li>
              <li>For information about using CSS files to configure the extended
                  <term>framework</term>, see <xref
                  href="dg-customize-default-CSS.dita#dg-customize-default-CSS"/>.</li>
              <li>For information about configuring the Content Completion proposals for the
                extended <term>framework</term>, see <xref
                  href="wa-cc-configuration.dita#wa-cc-configuration"/>.</li>
            </ul></li>
          <li>Click <uicontrol>OK</uicontrol> to close the dialog box and then
              <uicontrol>OK</uicontrol> or <uicontrol>Apply</uicontrol> to save the changes.</li>
          <li>Create an archive that only contains your custom framework folder that you created in
            the first step of this procedure. The archive should contain exactly one
            folder<?oxy_insert_start author="Cristian Talau" timestamp="20170526T074822+0000"?> (for
            example, <codeph>dita-extension</codeph>)<?oxy_insert_end?>. You will need this archive
            structure to <xref href="#customizing_frameworks/deploying_a_framework" format="dita"
              >upload the <term>framework</term> to Web Author</xref>.</li>
        </ol>
      </p>
    </section>
    <section id="developing_and_testing_a_framework_using_the_weba">
      <title>Testing a Custom Framework Using the Oxygen XML Web Author Test Server Add-on</title>
      <p>The following procedures assumes that you have access to an <ph keyref="product"/>
        standalone installation. This is not a mandatory requirement, but rather a way to speed up
        the development process.</p>
      <p>
        <ol id="ol_g2c_pnz_1r">
          <li>Use the standalone installation of <ph keyref="product"/> to <xref
              href="#customizing_frameworks/section_zzf_pns_vz" format="dita">customize a specific
                <term>framework</term></xref>.</li>
          <li>Install the <uicontrol>Oxygen Web Author Test Server</uicontrol> add-on.<ol>
              <li>Go to <menucascade>
                  <uicontrol>Help</uicontrol>
                  <uicontrol>Install new add-ons</uicontrol>
                </menucascade> to open an add-on selection dialog box.</li>
              <li>In the <uicontrol>Show add-ons from</uicontrol> text box, enter the following url:
                  <b>http://www.oxygenxml.com/InstData/Addons/optional/updateSite.xml</b>.</li>
              <li>Select the <b>Oxygen Web Author Test Server</b> add-on and click
                  <uicontrol>Next</uicontrol>.</li>
              <li>Select the <b>I accept all terms of the end user license agreement</b> option and
                click <uicontrol>Finish</uicontrol>.</li>
              <li>Restart the application.<p><b>Result:</b> You should now have a <uicontrol>Start
                    Web Author Server</uicontrol> button on the toolbar.</p></li>
            </ol></li>
          <li>Open an XML file in <ph keyref="product"/>.<note type="trouble">The <b>Web Author Test
                Server</b> does not load <term>frameworks</term> that have the
                <uicontrol>Storage</uicontrol> option set to <uicontrol>Internal</uicontrol> in the
                <xref href="the-document-type-dialog.dita#the-document-type-dialog/dta_storage"
                  ><uicontrol>Document Type</uicontrol> Configuration dialog box</xref>. Therefore,
              the XML file needs to be from a <term>framework</term> that has that option set to
                <uicontrol>External</uicontrol>.</note></li>
          <li>Click the <uicontrol>Start Web Author Server</uicontrol> button found on the toolbar.
            This starts a Tomcat server and opens a file chooser dialog box:<p>
              <fig>
                <title>Web Author Test Server File Chooser Dialog Box</title>
                <image href="../img/wa_test_server_dialog1.png"/>
              </fig>
            </p>The dialog box shows a URL entry for up to two network interfaces that are available
            on your desktop PC. The Tomcat server accesses the <term>frameworks</term>
            <?oxy_delete author="Cristian Talau" timestamp="20170526T080829+0000" content="a options, and &lt;term&gt;plugins&lt;/term&gt;"?><?oxy_insert_start author="Cristian Talau" timestamp="20170526T080830+0000"?>
            and options<?oxy_insert_end?> currently in use by <ph keyref="product"/>.</li>
          <li>Open the XML document with one of the following methods:<ul>
              <li><b>Mobile Device</b> - To open the current document in your mobile device, click
                the <uicontrol>QR Code</uicontrol> button next to one of the network interface
                listings and use a QR code reader on your mobile device.</li>
              <li><b>Desktop Browser</b> - To open the current document in your desktop browser,
                click the <uicontrol>Open in Browser</uicontrol> button next to one of the network
                interface listings.</li>
            </ul></li>
          <li><xref href="#customizing_frameworks/make-changes-li" format="dita">Make whatever
              changes you want to your <term>framework</term></xref>. Note that these changes will
            not automatically be reflected in the <ph keyref="webappProduct"/> if it was already
            running. To see the results of changes, close the server using the <b>Close and stop
              server</b> button in the file chooser dialog box and start it again.</li>
        </ol>
      </p>
      <p>
        <note type="attention">When using this test server add-on, editing sessions have a limited
          duration. If the session stops working, click the <b>Close and stop server</b> button in
          the file chooser dialog box and start it again.</note>
      </p>
    </section>
    <section id="deploying_a_framework">
      <title><?oxy_comment_start author="Cristian Talau" timestamp="20170526T075219+0000" comment="Not sure if you could conref this."?>Uploading
        a Custom Framework to Web Author<?oxy_comment_end?></title>
      <p>To upload a custom <term>framework</term> to your Web Author deployment, follow this procedure:<ol>
          <li>Go to your <xref href="webapp-admin-page.dita#webapp-admin-page">Administration
              Page</xref>.</li>
          <li>Select <uicontrol>Frameworks</uicontrol>.</li>
          <li>Click <uicontrol>Upload Framework</uicontrol> and choose a <term>framework</term>
            archive to upload.<note type="important"><ph keyref="webappProduct"/> does a validation
              check to make sure the uploaded framework archive contains the proper extension
              descriptor file (<filepath>*.framework</filepath>). The archive should contain exactly
              one folder. Otherwise you will receive an error that the upload was
            rejected.</note></li>
          <li>Click <uicontrol>OK</uicontrol> to upload the file.<p><b>Result:</b> The
                <term>framework</term> should appear in the list on this
                <uicontrol>Frameworks</uicontrol> page. Uploaded frameworks appear with a light
              green highlight so that you can identify them easily.</p></li>
          <li>Once you are finished with all of your changes, restart the server.</li>
        </ol></p>
    </section>
    <section id="customization_tips">
      <title>Other Customization Tips</title>
      <p>
        <ul id="ol_css_3h1_br">
          <li>If you want to use CSS rules that only apply when the <term>framework</term> is used
            in the <ph keyref="webappProduct"/>, use the following <codeph>media</codeph>
            query:<codeblock outputclass="language-css">@media oxygen AND (platform:webapp) {
 ... 
}</codeblock></li>
          <li>In the <filepath>web</filepath> folder of each <term>framework</term>, you can add a
              <filepath>framework.js</filepath> file that calls the <xref
              href="customizing_js.dita#customizing_js">JavaScript API</xref> to implement custom
            editing actions. The possible use cases include the following:<ul>
              <li>Create custom actions and add them to the toolbar or contextual menu. For more
                details, see the <xref keyref="jscript_api_customaction">JS custom action
                  tutorial</xref>.</li>
              <li>Create custom form controls. For more details, see the <xref
                  keyref="jscript_api_formcontrol">JS form control tutorial</xref>.</li>
              <li>Add more views. For more details, see the <xref keyref="jscript_api_customview">JS
                  custom view tutorial</xref>.</li>
            </ul></li>
          <li>If the <term>framework</term> contains <uicontrol>Author</uicontrol> mode operations
            (Java implementations of the
              <codeph>ro.sync.ecss.extensions.api.AuthorOperation</codeph> interface), they can be
            enabled to be used by the <ph keyref="webappProduct"/> using the
              <codeph>ro.sync.ecss.extensions.api.WebappCompatible</codeph>
                annotation.<note><uicontrol>Author</uicontrol> mode operations that use <term>Java
                Swing</term> components to display a graphical interface are not compatible with the
                <ph keyref="webappProduct"/> and they should not be annotated.</note></li>
          <li>The <ph keyref="webappProduct"/> continuously validates the XML documents using the
            default validation scenarios defined at <term>framework</term> level. Only the
            validation units that have the <xref
              href="edit-validation-scenario.dita#edit-validation-scenario/validation-config-dialog"
                ><uicontrol>Automatic Validation</uicontrol> option selected in the <uicontrol>Edit
                Scenario</uicontrol> dialog box</xref> that is accessed by editing a scenario in the
              <xref href="document-type-validation-tab.dita#document-type-validation-tab"
                ><uicontrol>Validation</uicontrol> subtab</xref> when editing a document type.</li>
        </ul>
      </p>
    </section>
  </body>
</topic>
<?oxy_options track_changes="on"?>