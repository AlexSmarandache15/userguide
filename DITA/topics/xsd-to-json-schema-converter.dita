<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="xsd-to-json-schema-converter">
  <title>XSD to JSON Schema Converter</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>JSON documents<indexterm>XSD to JSON Schema converter</indexterm></indexterm>
        <indexterm>Convert XSD to JSON Schema</indexterm>
        <indexterm>XSD to JSON Schema tool</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_bxf_cgk_54b"><ph keyref="product"/> includes a tool for converting an XML Schema file (XSD) to a JSON
      Schema file. The <uicontrol>XSD to JSON Schema</uicontrol> action for invoking the tool can be
      found in the <menucascade>
        <uicontrol>Tools</uicontrol>
        <uicontrol>JSON Tools</uicontrol>
      </menucascade> menu. It requires an additional add-on to be installed, so the first time you
      invoke the action, <ph keyref="product"/> will present a dialog box asking if you want to
      install it. Once installed, you need to restart <ph keyref="product"/> and the <uicontrol>XSD
        to JSON Schema</uicontrol> action will invoke the tool.</p>
    <p id="p_cxf_cgk_54b">To convert an XML Schema (XSD) to a JSON Schema, follow these steps:</p>
    <ol id="procedure-import-from-HTML">
      <li id="li_dxf_cgk_54b">
        <p id="p_exf_cgk_54b">Select the <uicontrol>XSD to JSON Schema</uicontrol> action from the <menucascade>
            <uicontrol>Tools</uicontrol>
            <uicontrol>JSON Tools</uicontrol>
          </menucascade> menu.</p>
        <p id="p_fxf_cgk_54b"><b>Step Result:</b> The <uicontrol>XSD to JSON Schema</uicontrol> dialog box is
          displayed:</p>
        <p id="p_gxf_cgk_54b">
          <fig id="fig_mvj_pvd_w3b">
            <title>XSD to JSON Schema Dialog Box</title>
            <image href="../img/Convert_XSD_JSON_Schema.png" id="image_twc_5qf_jd"/>
          </fig>
        </p>
      </li>
      <li id="li_hxf_cgk_54b">In the <uicontrol>XSD URL</uicontrol> field, choose or enter the URL of the XML Schema
        document. The conversion supports XSD versions 1.0 and 1.1.</li>
      <li id="li_ixf_cgk_54b">In the <uicontrol>Output file</uicontrol> field, choose the path for the resulting output
        file.</li>
      <li id="li_jxf_cgk_54b">For the <uicontrol>JSON Schema version</uicontrol> option, choose the version of the
        resulting JSON schema. The possible choices are: <uicontrol>Draft 4</uicontrol>,
          <uicontrol>Draft 6</uicontrol>, <uicontrol>Draft 7</uicontrol>, and <uicontrol>Draft
          2019-09</uicontrol>.</li>
      <li id="li_kxf_cgk_54b">[Optional] If you select the <uicontrol>Restrict additional
          content</uicontrol> option, then <codeph>additionalProperties</codeph> (for objects) and
          <codeph>additionalItems</codeph> (for arrays) will be set to <codeph>false</codeph> in the
        resulting schema. By default, these keys are not in the schema, meaning that providing
        additional content (according to the schema) is allowed.</li>
      <li id="li_lxf_cgk_54b">[Optional] You can select the <uicontrol>Preserve case of names from
          the XSD</uicontrol> option if you want the names from the XSD to remain unchanged in the
        resulting JSON Schema. Otherwise, the default JAXB naming algorithm will be applied (for
        example, "<codeph>some.nAMe</codeph>" is changed to "<codeph>SomeNAMe</codeph>", or
          "<codeph>Some_oth3r_name</codeph>" is changed to "<codeph>SomeOth3RName</codeph>").</li>
      <li id="li_mxf_cgk_54b">[Optional] You can select the <uicontrol>Open in Editor</uicontrol> option to open the
        resulting JSON Schema document in the main editing pane.</li>
      <li id="li_nxf_cgk_54b">Click the <uicontrol>Convert</uicontrol> button.</li>
    </ol>
    <p id="p_oxf_cgk_54b"><b>Result:</b> The original XSD document is now converted to a JSON Schema document. The
      resulting JSON Schema will be the specified draft and will contain:<ul id="ul_bfg_ngq_ckb">
        <li id="li_pxf_cgk_54b">The <codeph>$id</codeph> of the schema, generated from XSD
            <codeph>targetNamespace</codeph>.</li>
        <li id="li_qxf_cgk_54b">The <codeph>$definitions</codeph> section, which declares
            <codeph>complex</codeph> and <codeph>enum</codeph> types.</li>
        <li id="li_rxf_cgk_54b">The <codeph>anyOf</codeph> section, which lists possible top-level elements as an array
          of objects.</li>
      </ul></p>
    <p id="p_sxf_cgk_54b"><b>Other Possible Results</b>:<ul id="ul_j4b_1hq_ckb">
        <li id="li_txf_cgk_54b">If an XSD type extends another type, then its schema is combined with the schema of the
          base type using the <codeph>allOf</codeph> keyword.</li>
        <li id="li_uxf_cgk_54b">If an extension in XSD defines an element with the same name as an attribute in the
          base, a property named <codeph>rest</codeph> is generated to avoid name conflicts in
          JSON.</li>
        <li id="li_vxf_cgk_54b">If a property of a complex type is a collection property, the schema of the collection
          items will be wrapped in the JSON array schema.</li>
      </ul></p>
    <section id="section_jmq_yyp_ckb">
      <title>Conversion Mappings</title>
      <p id="p_wxf_cgk_54b">The following table lists the specific conversion mapping details.</p>
      <table frame="all" rowsep="1" colsep="1" id="table_s4h_gzp_ckb">
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1*" align="center"/>
          <colspec colname="c2" colnum="2" colwidth="1*" align="center"/>
          <thead>
            <row>
              <entry><b>XML Schema Type</b></entry>
              <entry><b>JSON Schema Representation</b></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><term>anySimpleType</term></entry>
              <entry>string, number, integer, boolean, null</entry>
            </row>
            <row>
              <entry><term>anyType</term></entry>
              <entry>string, number, integer, boolean, null, object, array</entry>
            </row>
            <row>
              <entry><term>string</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>normalizedString</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>token</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>language</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>Name</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>NCName</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>ID</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>IDREF</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>IDREFS</term></entry>
              <entry>array of strings</entry>
            </row>
            <row>
              <entry><term>ENTITY</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>ENTITIES</term></entry>
              <entry>array of strings</entry>
            </row>
            <row>
              <entry><term>NMTOKEN</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>NMTOKENS</term></entry>
              <entry>array of strings</entry>
            </row>
            <row>
              <entry><term>boolean</term></entry>
              <entry>boolean</entry>
            </row>
            <row>
              <entry><term>base64Binary</term></entry>
              <entry>array of integers</entry>
            </row>
            <row>
              <entry><term>hexBinary</term></entry>
              <entry>array of integers</entry>
            </row>
            <row>
              <entry><term>float</term></entry>
              <entry>number</entry>
            </row>
            <row>
              <entry><term>decimal</term></entry>
              <entry>number</entry>
            </row>
            <row>
              <entry><term>integer</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>nonPositiveInteger</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>negativeInteger</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>long</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>int</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>short</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>byte</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>nonNegativeInteger</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>unsignedLong</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>unsignedInt</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>unsignedShort</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>unsignedByte</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>positiveInteger</term></entry>
              <entry>integer</entry>
            </row>
            <row>
              <entry><term>double</term></entry>
              <entry>number</entry>
            </row>
            <row>
              <entry><term>anyURI</term></entry>
              <entry>string with "format":"uri"</entry>
            </row>
            <row>
              <entry><term>QName</term></entry>
              <entry>object with "namespaceURI", "localPart", "prefix"</entry>
            </row>
            <row>
              <entry><term>duration</term></entry>
              <entry>string</entry>
            </row>
            <row>
              <entry><term>dateTime</term></entry>
              <entry>string with "format":"date-time"</entry>
            </row>
            <row>
              <entry><term>date</term></entry>
              <entry>string with "format":"date"</entry>
            </row>
            <row>
              <entry><term>time</term></entry>
              <entry>string with "format":"time"</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="limitations">
      <title>Conversion Limitations</title>
      <p id="p_xxf_cgk_54b">In most cases, the conversion creates an equivalent schema, but there are some
          limitations:<ul id="ul_zb2_kch_cjb">
          <li id="li_yxf_cgk_54b">Restrictions/facets are not taken into consideration when
            converting (<codeph>fractionDigits, pattern, totalDigits, whiteSpace</codeph>,
              <codeph>minInclusive</codeph>, <codeph>maxInclusive</codeph>, and the restrictions for
            length, except <codeph>enumeration)</codeph>. However, extensions and indicators are
            properly converted (<codeph>minOccurs, maxOccurs, group, sequence,
            choice</codeph>).</li>
          <li id="li_zxf_cgk_54b">The <xmlelement>documentation</xmlelement> element is not converted into
              <xmlelement>description</xmlelement>.</li>
          <li id="li_ayf_cgk_54b">The <xmlatt>substitutionGroup</xmlatt> attribute for an element that has no declared
            type becomes a reference to the element that can substitute it.</li>
          <li id="li_byf_cgk_54b">The <xmlatt>block</xmlatt> attribute is not taken into consideration during the
            conversion.</li>
        </ul></p>
    </section>
  </body>
</topic>
