<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wa-cc-configuration">
    <title>Customizing the Content Completion Assistant</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Web Author Component<indexterm>Customizing the Content Completion
            Assistant</indexterm></indexterm>
        <indexterm>Customizing the Content Completion Assistant in Web Author</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <section id="section_zzf_pns_vz">
      <title>Customizing Content Completion in the Document Type Configuration Dialog Box</title>
      <p>You can go to the <menucascade>
          <uicontrol>Options</uicontrol>
          <uicontrol>Preferences</uicontrol>
        </menucascade> dialog, choose <uicontrol>Document Type Associations</uicontrol>, edit the
        framework for your document type (you should not edit the built-in framework, but <xref
          href="https://www.oxygenxml.com/doc/versions/19.0/ug-editor/topics/author-document-type-extension-sharing.html"
          format="html" scope="external">extend it</xref>). Go to the <uicontrol>Author</uicontrol>
        tab and <uicontrol>Content Completion</uicontrol> sub-tab. </p>
      <p>In this dialog you can either specify <ol>
          <li>elements to remove from the content completion assistant </li>
          <li>actions to be added to the content completion menu</li>
        </ol></p>
    </section>
    <section id="section_hfb_vns_vz">
      <title>Customizing Content Completion Using a Configuration File</title>
      <p>Customizing using the <xref
          href="https://www.oxygenxml.com/doc/versions/19.0/ug-editor/topics/configure-elements-attr-cc-individually.html?hl=cc_config"
          format="html" scope="external"><filepath>cc_config.xml</filepath></xref> file is also
        supported in Web Author.</p>
    </section>
    <section id="section_gxd_wns_vz">
      <title>Changing the Keyboard Shortcut for Invoking the Content Completion Assistant</title>
      <p>The content completion is invoked automatically when the users press
          <uicontrol>Enter</uicontrol>. For non-technical users it may be helpful to disable this
        feature and use the default behavior of typical word processors which insert a new paragraph
        on <uicontrol>Enter</uicontrol>. This can be achieved by using a the code below in a
        <?oxy_comment_start author="cristi_talau@sync.ro" timestamp="20170510T061024+0000" comment="Add links to the corresponding topics."?>plugin
        or a
        framework<?oxy_comment_end?>:<codeblock outputclass="language-javascript">// If 'splitOnEnter' url parameter is set to 'true',
//    the split is executed automatically when pressing 'Enter'. 
// In this case the content completion window can be accessed
//    when pressing 'CTRL + Enter'.
   
(function() {
 var splitOnEnter =  decodeURIComponent(sync.util.getURLParameter("splitOnEnter"));
 if (splitOnEnter === 'true') {
   goog.events.listen(workspace, sync.api.Workspace.EventType.EDITOR_LOADED, function(e) {
    var actionsManager = e.editor.getActionsManager();
    
// Change the shortcut of "Enter" action to ctrl enter
actionsManager.setActionShortcut('Author/Enter', 'ctrl enter');
   
// Create "Split Element" action
var splitElementAction = new sync.actions.SplitElementAtCaretAction
                         ('enter', e.editor.readOnlyStatus, e.editor.controller);

// Create compound action that splits the element at cursor when
//    there is no selection, and surrounds the selection.

// with the element chosen by the user otherwise
var newEnterAction = new sync.actions.CompoundAction('enter',
      splitElementAction, actionsManager.getActionById('Author/SurroundWithElement'));

// Register the new action to be executed on enter
      actionsManager.registerAction('Author/SplitOnEnter', newEnterAction);
    });

/**
 * Action that splits the element at caret.
 *
 * @param {sync.model.ReadOnlyStatus} readOnlyStatus The read-only status of the file.
 * @param {string} keystrokeStr The string representation of the shortcut of the action.
 * @param {sync.ctrl.Controller} controller The document controller.
 * @constructor
 */
sync.actions.SplitElementAtCaretAction = function(keystroke, readOnlyStatus, controller) {
sync.actions.AbstractAction.call(this, keystroke);
   this.readOnlyStatus = readOnlyStatus;
   this.controller = controller;
  };
goog.inherits(sync.actions.SplitElementAtCaretAction, sync.actions.AbstractAction);

/**
 * The actual action execution.
 *
 * @param {function} callback The method to call after the action has completed.
 */
sync.actions.SplitElementAtCaretAction.prototype.actionPerformed = function(opt_callback){
  var params = { docId: this.controller.docId };
  sync.select.getSelection().extend(params);
  var controller = this.controller;
  RESTContentCompletionManager.splitElement(sync.util.extend(params, {
    $callback: function (httpCode, xmlHttpRequest, newDocumentUpdate) {
      try {
        controller.applyUpdate_(newDocumentUpdate);
      } finally {
        if (typeof opt_callback === 'function') {
         opt_callback();
       }
     }
   }
 }));
};

/** @override */
 sync.actions.SplitElementAtCaretAction.prototype.isEnabled = function() {
   return !this.readOnlyStatus.isReadOnly();
 };
}
})();</codeblock></p>
    </section>
  </body>
</topic>
