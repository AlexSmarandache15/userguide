<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="ch_bookmarks">
  <title>Bookmarks</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Bookmarks</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_tbv_dgk_54b">PDF bookmarks provide an additional way of navigating, similar to a table of contents. The
      tree bookmark structure is intended to be used by the PDF readers, usually displayed in a side
      view. More often, the bookmarks show the logical hierarchy of the book, with pointers to the
      chapters and section, similar to a TOC. Creating bookmarks has no effect on the printed
      material.</p>
    <p id="p_ubv_dgk_54b"><ph keyref="product"/> can create PDF bookmarks by using the standard CSS properties:
        <codeph>bookmark-level</codeph>, <codeph>bookmark-label</codeph>, and
        <codeph>bookmark-state</codeph>. </p>
    <p id="p_vbv_dgk_54b">For an HTML document, you can collect the titles from the heading elements text.</p>
    <codeblock outputclass="language-css" id="codeblock_wbv_dgk_54b">h1, h2, h3, h4, h5, h6 {
   bookmark-label: content(text);
}</codeblock>
    <p id="p_xbv_dgk_54b">In the following example, the <codeph>:before</codeph> pseudo-element is concatenated. That
      prefixes each of the <b>h1</b> with the value of the chapter number, with the text from the
      element:</p>
    <codeblock outputclass="language-css" id="codeblock_ybv_dgk_54b">body {
    counter-reset: chapter;
}
...
h1 { 
    bookmark-label: content(before) " / " content(text);
}

h1:before{
    content: counter(chapter);
    counter-increment:chapter;
}</codeblock>
    <p id="p_zbv_dgk_54b">You can define the level (depth in the hierarchy) of the bookmarks. The deeper the section,
      the higher the level:</p>
    <codeblock outputclass="language-css" id="codeblock_acv_dgk_54b">h1 { bookmark-level: 1; }
h2 { bookmark-level: 2; }
h3 { bookmark-level: 3; }
h4 { bookmark-level: 4; }
h5 { bookmark-level: 5; }
h6 { bookmark-level: 6; }</codeblock>
    <p id="p_bcv_dgk_54b">Also, you can control if the bookmarks are shown expanded or collapsed in the bookmark view.
      By default, all bookmarks are open. To close all the nodes from the level 2, you can use:</p>
    <codeblock outputclass="language-css" id="codeblock_ccv_dgk_54b">h2 {
    bookmark-state:closed;
}</codeblock>
    <note id="note_dcv_dgk_54b">In the built-in CSS that <ph keyref="product"/> uses for processing HTML, the bookmarks
      are already configured using the <codeph>bookmark-level</codeph> and
        <codeph>bookmark-label</codeph> properties. If you need to set the closed/open state, you
      should use the <codeph>bookmark-state</codeph> property in your custom CSS file.</note>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link format="html" href="https://www.w3.org/TR/css-gcpm-3/#bookmarks" scope="external">
        <linktext>W3C Working Draft: Generated Content for Paged Media Module: Bookmarks</linktext>
      </link>
    </linklist>
  </related-links>
</topic>
