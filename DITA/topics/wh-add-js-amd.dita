<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wh-add-js-amd">
  <title>How to Insert JavaScript AMD Modules</title>
  <body>
    <p id="p_a5n_cgk_54b">In the WebHelp Responsive output, you may want to include a JavaScript module that uses the
      Asynchronous Module Definition (AMD) format. Unlike the traditional JavaScript resources that
      are loaded using <xmlelement>script</xmlelement> tags, these modules are loaded using the
        <term>RequireJS</term> library. For the traditional JavaScript libraries, the standard
      procedure to contribute your script to the output would be to use an HTML fragment file as
      described <xref href="wh-add-custom-html.dita">here</xref>.</p>
    <p id="p_b5n_cgk_54b">Although following the <xref href="wh-add-custom-html.dita">procedure that uses HTML
        fragments</xref> would result in having your JS file included in the output, loading the JS
      code in the browser will result in an error. Since your JS module uses the <xref
        href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" format="html" scope="external"
        >AMD API</xref>, it cannot be loaded using a <xmlelement>script</xmlelement> element. For
      example, because many jQuery plugins use the AMD format, it will be difficult for you to use
      those libraries in your custom WebHelp output.</p>
    <p id="p_c5n_cgk_54b">Normally, a JavaScript AMD module can be loaded in one of the following ways:</p>
    <ul id="ul_d5n_cgk_54b">
      <li id="li_e5n_cgk_54b">
        <p id="p_f5n_cgk_54b"><b>As a top-level script</b>, using the <xmlatt>data-main</xmlatt> attribute of the
            <xmlelement>script</xmlelement> element used to load the <term>RequireJS</term> library.
          <codeblock outputclass="language-xml" id="codeblock_g5n_cgk_54b">&lt;script data-main="js/template-main.js" src="js/require.js">&lt;/script></codeblock></p>
        <p id="p_h5n_cgk_54b">However, since WebHelp already loads its internal JS modules using
          <term>RequireJS</term>, a top-level script is already specified and you cannot specify
          another top-level script in the same page. Therefore, this approach cannot be used to load
          your custom JS module in <b>Oxygen XML WebHelp</b>, leaving you with only the following
          option.</p>
      </li>
      <li id="li_i5n_cgk_54b"><b>As a dependency module</b>, using a <codeph>require()</codeph> call from the top-level
        (main) script or from one of its dependency modules. This means that you would have to alter
        one of the WebHelp core JS libraries and inject a <codeph>require()</codeph> call to load
        your custom module:
          <codeblock outputclass="language-javascript" id="codeblock_j5n_cgk_54b">require(['js/template-main.js']);</codeblock><note id="note_k5n_cgk_54b">Altering
          the WebHelp core libraries is not recommended because when you will upgrade the WebHelp
          plugin to a newer version, those modifications will be lost.</note></li>
    </ul>
    <section id="contribute_javascript_amd_modules_using_a_publish">
      <title>Contributing JavaScript AMD Modules Using a Publishing Template</title>
      <p id="p_l5n_cgk_54b"><b>Oxygen XML WebHelp</b> provides the ability to contribute a custom JavaScript
        Asynchronous Module Definition (AMD) resource in the output by referencing it in the <xref
          href="whr_publishing_template_contents.dita#template_descritpor_file">Publishing Template
          descriptor file</xref>. This module is automatically copied to the output directory and it
        is automatically loaded in the output HTML pages using a <codeph>require()</codeph> call.
        Thus, you can include your scripts in the output without altering WebHelp's core JavaScript
        libraries.</p>
      <p id="p_m5n_cgk_54b">This module may contain all of your custom functionality or can be used to load other AMD
        JavaScript modules. The additional sub-modules can be stored either locally in your custom
        Publishing Template or on a remote web server.<note type="important" id="note_n5n_cgk_54b">To enable loading of a
          JS module you should set the <codeph>webhelp.enable.template.js.module.loading</codeph>
          parameter to <codeph>yes</codeph> (the default value is <codeph>no</codeph>) in the
          Publishing Template descriptor file or in the transformation scenario.</note></p>
    </section>
    <section id="the_javascript_modules">
      <title>The JavaScript Modules</title>
      <p id="p_o5n_cgk_54b"><xref
          href="https://github.com/oxygenxml/oxygen-publishing-template-samples/wiki/JavaScript-AMD-Modules"
          format="html" scope="external">The <b>JS Modules</b> sample template</xref> contains a
        main JavaScript module (<filepath>template-main.js</filepath>) that loads other modules
        stored in the template package or in a remote location on the
        Internet.<codeblock outputclass="language-javascript" id="codeblock_p5n_cgk_54b">define(['require'], function (require) {
    require(['./red', './italic', './tables']);
});</codeblock></p>
      <p id="p_q5n_cgk_54b">Besides the main JavaScript example, the template contains 3 other sub-modules:<ul id="ul_r5n_cgk_54b">
          <li id="li_s5n_cgk_54b"><b><filepath>red.js</filepath></b> - Changes the font color of the publication
            title.<codeblock outputclass="language-javascript" id="codeblock_t5n_cgk_54b">define(["jquery"], function ($) {
    $(document).ready(function () {
        // Make the title red
        $('.wh_publication_title a').attr('style', 'color:red');
    });
});</codeblock></li>
          <li id="li_u5n_cgk_54b"><b><filepath>italic.js</filepath></b> - Changes the font style of your publication
            title.<codeblock outputclass="language-javascript" id="codeblock_v5n_cgk_54b">define(["jquery"], function ($) {
    $(document).ready(function () {
        // Make the title italic
        $('.wh_publication_title a').wrapInner('&lt;i>&lt;/i>');
    });
});</codeblock></li>
          <li id="li_w5n_cgk_54b"><b><filepath>tables.js</filepath></b> - Loads the <xref href="https://datatables.net/"
              format="html" scope="external">DataTables</xref> jQuery plugin from a
            CDN.<codeblock outputclass="language-javascript" id="codeblock_x5n_cgk_54b">define(["jquery", 
    "https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"], function ($) {

    $(document).ready(function () {
        $('.table').DataTable();
    });
});</codeblock></li>
        </ul></p>
      <p id="p_y5n_cgk_54b">The JavaScript modules are stored in the Publishing Template package as
        follows:<codeblock outputclass="language-ini" id="codeblock_z5n_cgk_54b">[template-dir]
    [js]
        template-main.js
        italic.js
        red.js
        tables.js</codeblock></p>
      <p id="p_avn_cgk_54b">
        <note type="other" othertype="Notes" id="note_bvn_cgk_54b">
          <ul id="ul_cvn_cgk_54b">
            <li id="li_dvn_cgk_54b">The main module should be referenced in the <xref
                href="whr_publishing_template_contents.dita#template_descritpor_file">Publishing
                Template descriptor file</xref> by specifying its path relative to the base
              directory of the template.
              <codeblock outputclass="language-xml" id="codeblock_evn_cgk_54b">&lt;js-amd-module file="js/template-main.js"/></codeblock></li>
            <li id="li_fvn_cgk_54b">The main JS module is copied automatically to the output directory, but the
              sub-modules are not. To instruct the Publishing Template engine to copy those modules
              to the output directory you should include a <xmlelement>fileset</xmlelement> section
              in the <xref href="whr_publishing_template_contents.dita#template_descritpor_file"
                >Publishing Template descriptor
              file</xref>.<codeblock outputclass="language-xml" id="codeblock_gvn_cgk_54b">&lt;fileset>
    &lt;include name="js/*.js"/>
&lt;/fileset></codeblock></li>
            <li id="li_hvn_cgk_54b">The main module can reference other modules bundled in the publishing template
              package as follows: <ul id="ul_ivn_cgk_54b">
                <li id="li_jvn_cgk_54b"><b>Relative to template directory</b> - Prefix their paths with the ID of the
                  template directory: <b><filepath>template-base-dir</filepath></b> (for example:
                    <filepath>template-base-dir/js/italic</filepath>).</li>
                <li id="li_kvn_cgk_54b"><b>Relative to the name of the current JS module</b> - Use
                      <b><codeph>./</codeph></b> to prefix the paths of the referenced modules.</li>
                <li id="li_lvn_cgk_54b">The <b><codeph>.js</codeph></b> extension <b>should be omitted</b> for local
                  modules, because the <term>RequireJS</term> library will add it
                  automatically.</li>
              </ul></li>
          </ul>
        </note>
      </p>
    </section>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="wh-add-custom-html.dita"/>
    </linklist>
  </related-links>
</topic>
