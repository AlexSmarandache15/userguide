<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="framework-customization-script-usecases">
  <title>Framework XML Descriptor File</title>
  <shortdesc>The framework XML descriptor is used to describe a new framework configuration.
    Optionally, you can extend an existing built-in framework configuration, such as DITA or
    DocBook, and then make additions and changes to it. </shortdesc>
  <body>
    <p>The easiest way to create such a descriptor is to use the <b>New</b> document wizard and
      choose the <b>Extend Framework Script</b> or <b>Create Framework Script</b> template.</p>
    <p>The following examples assume that the newly created framework extends a built-in one. </p>
    <section id="section_kmt_jry_jnb">
      <title>Basic information</title>
      <p>Once you've created a new descriptor file, you need to:</p>
      <ul id="ul_ovk_r3d_knb">
        <li>Specify the framework's name through the <term>name</term> element. Optionally, you can
          also give a description though the <term>description</term> element.</li>
        <li>If you want to extend an existing framework, such as DITA or DocBook, specify the name
          of the extended framework using the <term>@base</term> attribute on the
            <term>script</term> element.</li>
        <li>The <term>priority</term> element might be needed to tell <ph keyref="product"/> to use
          this new framework instead of the one being extended or other frameworks that match on the
          same document.</li>
      </ul>
    </section>
    <example>
      <title>Extend the built-in DITA framework</title>
      <codeblock outputclass="language-xml">&lt;script xmlns="http://www.oxygenxml.com/ns/framework/extend"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.oxygenxml.com/ns/framework/extend 
  http://www.oxygenxml.com/ns/framework/extend/frameworkExtensionScript.xsd"
  base="DITA">
  &lt;name>My custom DITA framework&lt;/name>
  &lt;description>A custom framework based on the built-in DITA framework&lt;/description>
  &lt;priority>High&lt;/priority>
&lt;/script></codeblock>
    </example>
    <section id="section_classpath">
      <title>Changing the association rules</title>
      <p>
        <ph keyref="product"/> identifies the type of a document when the document matches at least
        one of the <i>association rules</i>. </p>
    </section>
    <example>
      <title>Inherit none of the built-in association and add your own</title>
      <codeblock outputclass="language-xml">&lt;associationRules inherit="none">
  &lt;addRule rootElementLocalName="concept"/>
  &lt;addRule fileName="test.xml"/>
&lt;/associationRules></codeblock>
    </example>
    <section id="section_snf_rry_jnb">
      <title>Changing the classpath</title>
      <p>The <uicontrol>Classpath</uicontrol> tab displays a list of folders and <xref
          keyref="glossentry_jar"><term>JAR</term></xref> libraries that hold implementations for
        API extensions, implementations for custom <uicontrol>Author</uicontrol> mode operations,
        various resources (such as stylesheets), and <xref keyref="glossentry_framework"
            ><term>framework</term></xref> translation files. <ph keyref="product"/> loads the
        resources looking in the folders in the order they appear in the list.</p>
    </section>
    <example>
      <title>Customize and extend the classpath inherited from the base framework</title>
      <codeblock outputclass="language-xml">  &lt;classpath inherit="all">
    &lt;!-- Contribute this resource before the ones inherited from the base framework
    because Oxygen loads the resources looking in the folders in the order they 
    appear in the list.
    -->
    &lt;addEntry path="${framework}/resources_2x" position="before"/>
    
    &lt;removeEntry path="${framework}/refactoring/"/>
  &lt;/classpath></codeblock>
    </example>
    <section id="section_cv1_ztm_knb">
      <title>Changing XML catalogs</title>
      <p>For cases where you need to reference the location of a schema file from a remote web
        location and an Internet connection may not be available, an <xref
          keyref="glossentry_xml-catalog"><term>XML Catalog</term></xref> may be used to map the web
        location to a local file system entry.</p>
    </section>
    <example>
      <title>Customize and extend the XML catalogs inherited from the base framework</title>
      <codeblock outputclass="language-xml">&lt;xmlCatalogs inherit="all">
  &lt;!-- Contribute this resource before the ones inherited from the base framework
    because Oxygen loads the resources looking in the folders in the order they 
    appear in the list.
    -->
  &lt;addEntry path="${framework}/catalog.xml" position="before"/>
  
  &lt;removeEntry path="${framework}/oldCatalog.xml"/>
&lt;/xmlCatalogs></codeblock>
    </example>
    <section id="section_fdb_2xm_knb">
      <title>Changing the document templates</title>
      <p>You can create your own custom document templates or remove templates inherited from the
        base framework.</p>
    </section>
    <example>
      <title>Customize and extend the XML catalogs inherited from the base framework</title>
      <codeblock outputclass="language-xml">&lt;documentTemplates inherit="all">
  &lt;!-- Contribute this resource before the ones inherited from the base framework
    to make them appear first in the list.
    -->
  &lt;addEntry path="${framework}/newTemplates" position="before"/>
  
  &lt;removeEntry path="${framework}/oldTemplates"/>
&lt;/documentTemplates></codeblock>
    </example>
    <section id="section_u4j_5xm_knb">
      <title>Adding new transformation scenarios and removing existing ones</title>
      <p>To import new transformation scenarios you need create and export them in one of the
        following places:<ul id="ul_fw5_dzm_knb">
          <li>the <xref href="scenarios-view.dita"/>.</li>
          <li>the <xref href="configure-transformation-dialog.dita"/></li>
          <li>the <xref href="document-type-transformation-tab.dita"/></li>
        </ul></p>
    </section>
    <example>
      <title>Importing new transformation scenarios</title>
      <p>We use the <xmlatt>href</xmlatt> attribute form the <xmlelement>addScenarios</xmlelement>
        element to point to the location of the scenarios export file. Besides that, we can remove
        any scenario inherited from the base framework as well as setting the default scenarios (the
        one used when another specific scenario is not specified).</p>
      <codeblock outputclass="language-xml">&lt;transformationScenarios>
  &lt;addScenarios href="scenarioExport.xml"/>
  &lt;removeScenario name="DITA HTML5"/>
  &lt;defaultScenarios>
    &lt;name>DITA&lt;/name>
    &lt;name>XML&lt;/name>
  &lt;/defaultScenarios>
&lt;/transformationScenarios></codeblock>
    </example>
    <section id="section_bkx_zym_knb">
      <title>Adding new validation scenarios and removing existing ones</title>
      <p>To import new validation scenarios you need create and export them in one of the following
          places:<ul id="ul_ckx_zym_knb">
          <li>the <xref href="create-validation-scenario.dita">Configure Validation Scenario Dialog
              Box</xref>.</li>
          <li>the <xref href="document-type-validation-tab.dita"/>.</li>
        </ul></p>
    </section>
    <example>
      <title>Importing new validation scenarios</title>
      <p>We use the <xmlatt>href</xmlatt> attribute form the <xmlelement>addScenarios</xmlelement>
        element to point to the location of the scenarios export file. Besides that, we can remove
        any scenario inherited from the base framework as well as setting the default scenarios (the
        one used when another specific scenario is not specified).</p>
      <codeblock outputclass="language-xml">&lt;validationScenarios>
  &lt;addScenarios href="validationScenarioExport.xml"/>
  &lt;removeScenario name="DITA"/>
  &lt;defaultScenarios>
    &lt;name>DITA Validation&lt;/name>
    &lt;name>XML Validation&lt;/name>
  &lt;/defaultScenarios>
&lt;/validationScenarios></codeblock>
    </example>
    <section id="section_kyz_sry_jnb">
      <title>Customizing the Author mode though new CSS files</title>
      <p>The Author mode layout is driven by CSS rules. To customize it we need to create new CSS
        files and add them in the new framework.</p>
    </section>
    <example>
      <title>Using larger fonts in titles</title>
      <codeblock outputclass="language-xml">&lt;author>
    &lt;css>
      &lt;removeCss path="${framework}/base.css"/>
      &lt;!-- 
        Adding CSS after the ones in the base gives the oportunity to 
        override rules from previous CSSs. 
      -->
      &lt;addCss path="${framework}/titles.css" position="after"/>
    &lt;/css>
  &lt;/author></codeblock>
      <p>The <filepath>${framework}/titles.css</filepath> file contains a rule like
        this:<codeblock outputclass="language-css">*[class~='topic/title'] {
  font-size:larger;
}</codeblock></p>
    </example>
    <example>
      <title>Create an alternate CSS that activates when the use selects it in the Styles
        menu</title>
      <codeblock outputclass="language-xml">  &lt;author>
    &lt;css>
      &lt;addCss path="${framework}/pink.css" title="Pink titles" alternate="true"/>
    &lt;/css>
  &lt;/author></codeblock>
      <p>The <filepath>${framework}/pink.css</filepath> file contains a rule like
        this:<codeblock outputclass="language-css">*[class~='topic/title'] {
  color:#FF1493;
}</codeblock></p>
    </example>
    <section id="section_qzt_5ry_jnb">
      <title>Define author actions for the new framework</title>
      <p>Create <xref href="dg-create-custom-actions.dita#dg-create-custom-actions/section_2"
          >external author actions</xref>, save them in a <xref
          href="dg-create-custom-actions.dita#dg-create-custom-actions/section_ht2_3jg_jlb">specific
          subdirectory of your particular framework directory</xref>, and they will be loaded
        automatically.</p>
    </section>
    <section id="section_b3l_yb2_knb">
      <title>Author toolbar configuration</title>
      <p>The new framework can customize the author mode specific toolbars by:</p>
      <ul id="ul_i5v_yry_jnb">
        <li>Adding or removing actions from toolbars.</li>
        <li>Changing toolbar groups by adding or removing actions.</li>
        <li>Creating new toolbars and action groups.</li>
      </ul>
    </section>
    <example>
      <title>Customizing the toolbar</title>
      <codeblock outputclass="language-xml">  &lt;author>
    &lt;toolbars>
      &lt;toolbar>

        &lt;!-- Remove an action inherited from the the base frmaework. -->
        &lt;removeAction id="bold"/>
        
        &lt;!-- Insert an action into an existing group -->
        &lt;group name="${i18n(link)}">
          &lt;addAction id="insert.note"/>
        &lt;/group>
        
        &lt;!-- Add actions, separators and new groups-->
        &lt;separator/>
        &lt;addAction id="insert.note"/>
        
        &lt;group name="New group">
          &lt;addAction id="insert.note"/>
          &lt;addAction id="insert.table"/>
        &lt;/group>
      &lt;/toolbar>
    &lt;/toolbars>
  &lt;/author></codeblock>
      <p>
        <note>If you create a toolbar or group configuration and a toolbar/group with the same name
          already exists in the base framework, you will change the one inherited instead of
          creating a new one. You can inspect the names of the existing toolbars/groups inherited
          from the base framework in the <xref href="the-toolbar-tab.dita"/>.</note>
      </p>
    </example>
    <example>
      <title>Create a new toolbar</title>
      <p>A new toolbar is created if the <term>@name</term> attribute doesn't match a toolbar
        inherited from base.</p>
      <codeblock outputclass="language-xml">&lt;author>
    &lt;toolbars>
      &lt;toolbar name="Extra Toolbar">
        &lt;!-- Add actions, separators and new groups-->
        &lt;separator/>
        &lt;addAction id="insert.note"/>
        
        &lt;group name="New group">
          &lt;addAction id="insert.note"/>
          &lt;addAction id="insert.table"/>
        &lt;/group>
      &lt;/toolbar>
    &lt;/toolbars>
  &lt;/author></codeblock>
    </example>
    <example>
      <title>Adding an action in the toolbar at a specific location</title>
      <p>You can insert items (actions or groups) relative to other items already present in the
        toolbar because they were inherited from the base framework configuration. The
          <xmlatt>anchor</xmlatt> will specify either the ID of an action or the naem of a group
        already present in the toolbar and <xmlatt>position</xmlatt> will specify whether the new
        item should be added before or after it.</p>
      <codeblock outputclass="language-xml">      &lt;toolbar>
        &lt;addAction id="insert.note" anchor="bold" position="before"/>
        
        &lt;group name="Table menu" anchor="${i18n(link)}" position="after">
          &lt;addAction id="insert.table"/>
        &lt;/group>
      &lt;/toolbar></codeblock>
    </example>
    <section id="section_egc_zr2_knb">
      <title>Author menu and contextual menu configuration</title>
      <p>The new framework can customize the author mode specific menus by:</p>
      <ul id="ul_yky_pz2_knb">
        <li>Adding or removing actions and submenus.</li>
        <li>Changing existing sub menus by adding or removing actions.</li>
      </ul>
    </section>
    <example>
      <title>Customizing the contextual menu</title>
      <codeblock outputclass="language-xml">    &lt;contextualMenu>
      &lt;!-- Add new actions and submenu -->
      &lt;separator/>
      &lt;addAction id="insert.table"/>
      &lt;submenu name="Other actions">
        &lt;addAction id="insert.note"/>
      &lt;/submenu>
      
      &lt;!-- Contribute to an existing submenu -->
      &lt;submenu name="${i18n(section)}">
        &lt;addAction id="paragraph"/>
      &lt;/submenu>
      
      &lt;!-- Remove a submenu inherited from the base framework. -->
      &lt;removeSubmenu name="${i18n(link)}"/>
    &lt;/contextualMenu></codeblock>
      <note>The framework main menu is configured similarly, inside a <xmlelement>menu</xmlelement>
        container.</note>
      <note>You can inspect the names of the submenus inherited from the base framework in the <xref
          href="the-contextual-menu-sub-tab.dita"/> and <xref href="the-menu-sub-tab.dita"/>.</note>
    </example>
    <example>
      <title>Adding an action in the contextual menu at a specific location</title>
      <p>You can insert new actions and submenus relative to other actions and submenus already
        present in the menu because they were inherited from the base framework configuration. The
          <xmlatt>anchor</xmlatt> will specify the ID of an author action or a name of a submenu
        already present in the menu and <xmlatt>position</xmlatt> will specify whether the new
        action should be added before or after it.</p>
      <codeblock outputclass="language-xml">    &lt;contextualMenu>
      &lt;addAction id="insert.note" anchor="edit.image.map" position="before"/>
      
      &lt;submenu name="Table menu" anchor="${i18n(insert)}" position="after">
        &lt;addAction id="insert.table"/>
      &lt;/submenu>
    &lt;/contextualMenu></codeblock>
    </example>
    <section id="section_cgh_yzm_knb">
      <title>Configuring the content completion in author mode</title>
      <p>You can replace content completion entries obtained from the associated schema with <xref
          href="dg-create-custom-actions.dita">author actions</xref>.</p>
      <p>In the <xmlelement>authorActions</xmlelement> container you specify the author actions to
        be contributed. Optionally, you can mark them as a replacement for an existing schema
        proposal with <xmlatt>replacedElement</xmlatt>. </p>
      <p>The <xmlelement>schemaProposals</xmlelement> allows you to remove proposals detected from
        the associated schema through the <xmlelement>removeProposal</xmlelement> element. If some
        proposals were removed in the base framework configuration and you want them back, you can
        do so though <xmlelement>addProposal</xmlelement>.</p>
    </section>
    <example>
      <title>Customizing the content completion assistant</title>
      <codeblock outputclass="language-xml">&lt;contentCompletion>
  &lt;authorActions>
    &lt;addAction id="insert.note" replacedElement="note" inCCWindow="true"/> 
  &lt;/authorActions>
  
  &lt;schemaProposals>
    &lt;removeProposal renderName="table"/>
    
    &lt;!-- The base framework removed the "list" element proposal. We want it back... -->
    &lt;addProposal renderName="list"/>
  &lt;/schemaProposals>
&lt;/contentCompletion></codeblock>
    </example>
    <section id="section_ffm_k1s_knb">
      <title>Using framework extension points</title>
      <p>The Extensions tab specifies implementations of Java interfaces used to provide advanced
        functionality to the document type. Libraries containing the implementations must be present
        in the <xref href="#extend-framework-usecases/section_classpath" format="dita"
          >classpath</xref> of your framework. The Javadoc available at
        https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ contains details about how each API
        implementation functions.</p>
    </section>
    <example>
      <title>Setting a custom extensions bundle</title>
      <codeblock outputclass="language-xml">&lt;extensionPoints>
  &lt;extension 
    name="extensionsBundleClassName" 
    value="ro.sync.ecss.extensions.dita.map.DITAMapExtensionsBundle"/>
&lt;/extensionPoints></codeblock>
    </example>
  </body>
</topic>
