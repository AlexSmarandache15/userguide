<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="git-addon">
  <title>Git Client Add-on</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Add-ons<indexterm>Git support</indexterm></indexterm>
        <indexterm>Git client add-on</indexterm>
        <indexterm>Git addon</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p id="p_gyg_dgk_54b">An add-on is available that contributes a built-in Git client directly in <ph
        keyref="product"/>. Once the add-on is installed, a <uicontrol>Git Staging</uicontrol> view
      is available that includes various actions that perform common Git commands, such as
        <i>push</i>, <i>pull</i>, <i>change branch</i>, <i>commit</i>, and more. It also includes a
      built-in tool for comparing and merging changes.</p>
    <section id="section_fqc_23y_kpb">
      <title>Installation</title>
      <p id="p_hyg_dgk_54b">To install the add-on, follow this procedure:<ol id="ol_zdl_rpm_knb">
          <li id="li_iyg_dgk_54b">Go to <menucascade>
              <uicontrol>Help</uicontrol>
              <uicontrol>Install new add-ons</uicontrol>
            </menucascade> to open an add-on selection dialog box. Enter or paste
              <b>https://www.oxygenxml.com/InstData/Addons/default/updateSite.xml</b> in the
              <uicontrol>Show add-ons from</uicontrol> field or select it from the drop-down
            menu.</li>
          <li id="li_jyg_dgk_54b">Select the <b>Git Client</b> add-on and click
              <uicontrol>Next</uicontrol>.</li>
          <li id="li_kyg_dgk_54b">Read the end-user license agreement. Then select the <uicontrol>I
              accept all terms of the end-user license agreement</uicontrol> option and click
              <uicontrol>Finish</uicontrol>.</li>
          <li id="li_lyg_dgk_54b">Restart the application.</li>
        </ol></p>
      <p id="p_myg_dgk_54b"><b>Result:</b> The <uicontrol>Git Staging</uicontrol> view is now
        available. To open the view, select <uicontrol>Git Staging</uicontrol> from the <menucascade>
          <uicontrol>Window</uicontrol>
          <uicontrol>Show View</uicontrol>
        </menucascade> menu (or select <uicontrol>Git Client</uicontrol> from the
          <uicontrol>Tools</uicontrol> menu). This view acts as a basic Git client integrated
        directly in <ph keyref="product"/>, and it provides support for committing changes to a Git
        repository, comparing and merging changes, resolving conflicts, and other Git commands.</p>
    </section>
    <section id="section_jjk_43y_kpb">
      <title>Cloning a Repository</title>
      <p id="p_egp_p3y_kpb">Click the <b>Clone new repository</b> button (it has a '+' sign as the
        icon) and provide the following:<ul id="ul_fgp_p3y_kpb">
          <li id="li_ggp_p3y_kpb"><b>Repository URL</b> - The URL of the remote repository to be
            cloned.</li>
          <li id="li_hgp_p3y_kpb"><b>Checkout branch</b> - A specific branch of the repository that
            is being cloned. The default branch will be cloned if another one is not specified.</li>
          <li id="li_igp_p3y_kpb"><b>Destination path</b> - The local path where the repository will
            be cloned.</li>
        </ul></p>
      <p id="p_jgp_p3y_kpb">After cloning a repository, it will automatically be set as the current
        working copy.</p>
    </section>
    <section id="section_ek1_s3y_kpb">
      <title>Authentication</title>
      <p id="p_phs_2ky_kpb">The <i>Git Client</i> supports both <b>HTTPS</b> and <b>SSH</b>
        connections to GitHub, GitLab, Bitbucket, and more.</p>
      <p id="p_qhs_2ky_kpb">To access the remote repository, you need to provide your authentication
        details (if not using unprotected SSH keys). If no such information is found in the add-on's
        settings, you will be prompted for them.</p>
      <p id="p_rhs_2ky_kpb">The <i>Git Client</i> allows you to authenticate over HTTPS by using
        either a basic authentication method (username + password) or a personal access token.<note
          id="note_dwb_qky_kpb" type="other" othertype="Notes">
          <ul id="ul_ths_2ky_kpb">
            <li id="li_uhs_2ky_kpb">The authentication using personal access tokens has been tested
              with GitHub and GitLab.</li>
            <li id="li_vhs_2ky_kpb">Bitbucket uses a concept similar to personal access tokens,
              named <i>app passwords</i>. An app password must be provided as the password for
                <i>Basic authentication</i>, along with the correct username.</li>
            <li id="li_whs_2ky_kpb">As of August 13, 2021, GitHub will no longer accept
              password-based authentication.</li>
          </ul>
        </note></p>
      <p id="p_xhs_2ky_kpb">If you have the <b>two-factor authentication (2FA)</b> enabled for
        GitHub or GitLab, to authenticate over HTTPS, you must generate a personal access token for
        your profile, and back in the <i>Git Staging</i> view in <ph keyref="product"/>, use the
        generated token value as the authentication password when asked for your credentials.</p>
      <p id="p_yhs_2ky_kpb">If, for example, you have been using a GitHub account but you decide to
        switch to another GitHub account, you would need to reset your credentials so that you will
        be prompted for new ones. This is because only one set of credentials for each Git
        platform/server is stored. To reset your credentials, go to the toolbar at the top of the
          <uicontrol>Git Staging</uicontrol> side-view, click the settings icon (a cogwheel), and
        select <uicontrol>Reset all credentials</uicontrol>.</p>
    </section>
    <section id="section_rly_fly_kpb">
      <title>Selecting a Working Copy</title>
      <p id="p_sly_fly_kpb">Click the <uicontrol>Browse</uicontrol> button to the right of the
          <uicontrol>Working copy</uicontrol> combo box to select a working copy from your file
        system. The selected folder must be a Git repository.</p>
    </section>
    <section id="section_k1s_jly_kpb">
      <title>Switching Between Local Branches</title>
      <p id="p_knw_kly_kpb">To easily switch between local branches, use the menu shown when you
        click the button that presents the name of the current branch in the top-right corner of the
          <uicontrol>Git Staging</uicontrol> view. Local branches can also be changed using the
          <xref href="#git-addon/section_bqk_nqy_kpb" format="dita"><uicontrol>Git Branch
            Manager</uicontrol></xref>.</p>
      <p id="p_lnw_kly_kpb">New branches can be created from the <xref
          href="#git-addon/section_bqk_nqy_kpb" format="dita"><uicontrol>Git Branch
            Manager</uicontrol></xref> or from the <b>History</b> table using the <uicontrol>Create
          branch</uicontrol> action in the contextual menu.</p>
    </section>
    <section id="section_wff_5ly_kpb">
      <title>Working with Submodules</title>
      <p id="p_bcg_vly_kpb">When cloning a repository that contains submodules, all submodules are
        initialized and cloned as well. When pulling changes from the remote repository, the
        submodules are also updated. The update of the submodules when performing a pull operation
        depends on the <uicontrol>Update all submodules after pulling changes from the remote
          repository</uicontrol> option from <menucascade>
          <uicontrol>Options</uicontrol>
          <uicontrol>Preferences</uicontrol>
          <uicontrol>Plugins</uicontrol>
          <uicontrol>Git Client</uicontrol>
        </menucascade> (the option is enabled by default).</p>
      <p id="p_ccg_vly_kpb">To open and work with a Git submodule, use the
          <uicontrol>Submodules</uicontrol> action from the toolbar and select the desired submodule
        from the presented combo box. As an alternative, if the submodule is modified and is
        presented in the <xref href="#git-addon/section_t21_pny_kpb" format="dita"
            ><uicontrol>Unstaged files</uicontrol> area</xref>, the <uicontrol>Open</uicontrol>
        contextual menu action can be used to open it.</p>
      <p id="p_dcg_vly_kpb">The tooltip of a modified submodule shown in the <xref
          href="#git-addon/section_t21_pny_kpb" format="dita"><uicontrol>Unstaged files</uicontrol>
          area</xref> presents information about the currently and previously tracked commits.</p>
    </section>
    <section id="section_hjy_kmy_kpb">
      <title>Showing the Current Branch History</title>
      <p id="p_skw_lmy_kpb">To show the history of the current branch, invoke the <uicontrol>Show
          current branch history</uicontrol> action from the toolbar of the <i>Git Staging</i> panel
        (look for the clock icon), or go to <menucascade>
          <uicontrol>Window</uicontrol>
          <uicontrol>Show view</uicontrol>
          <uicontrol>Git History</uicontrol>
        </menucascade>. This opens the <uicontrol>Git History</uicontrol> view at the bottom of the
        application.</p>
      <p id="p_tkw_lmy_kpb">For each commit in the history table, the following actions are
          available:<ul id="ul_ukw_lmy_kpb">
          <li id="li_vkw_lmy_kpb">
            <p id="p_wkw_lmy_kpb"><uicontrol>Create branch</uicontrol> - Used to create a new branch
              starting from the selected commit. The new branch is automatically checked out by
              default. To disable this behavior, deselect the <uicontrol>Checkout branch</uicontrol>
              option in the <i>Create branch</i> dialog box.<note id="note_ofj_tmy_kpb" type="tip"
                >To publish a new branch to the remote repository and start tracking that branch,
                you need to simply push the local branch using the dedicated action from the
                  <uicontrol>Git Staging</uicontrol> side-view.</note></p>
          </li>
          <li><uicontrol>Revert commit</uicontrol> - Used to create a new commit that reverts all
            the changes from the selected commit.</li>
          <li id="li_ykw_lmy_kpb"><uicontrol>Reset "[branch_name]" to this commit</uicontrol> - Used
            to undo changes by moving the HEAD of the current branch to the selected commit.</li>
        </ul></p>
      <p id="p_zkw_lmy_kpb">The <uicontrol>Git History</uicontrol> view presents all the affected
        resources for each commit in a list, in the bottom-right area. It includes a text filter
        field at the top that you can use to conduct searches (e.g. by Date, Author, or Commit ID).
        For each resource, the following actions are available in the contextual menu:<ul
          id="ul_alw_lmy_kpb">
          <li id="li_blw_lmy_kpb"><uicontrol>Open</uicontrol> (available for added and modified
            resources) - This action opens the selected resource.</li>
          <li id="li_clw_lmy_kpb"><uicontrol>Open previous version</uicontrol> (available for
            deleted resources) - This action opens the version of the selected resource from before
            its deletion.</li>
          <li><uicontrol>Open working copy version</uicontrol> (available for added and modified)
            resources - This action opens the working copy version of the selected resource. It also
            works if the resource has been renamed since the selected version.</li>
          <li id="li_dlw_lmy_kpb"><uicontrol>Compare with previous version</uicontrol> (available
            for modified resources) - This action compares the selected version of the selected
            resource with the previous one using the <xref href="file-comparison.dita"><b>Compare
                Files</b> tool</xref>.</li>
          <li id="li_elw_lmy_kpb"><uicontrol>Compare with working copy version</uicontrol>
            (available for modified resources) - This action compares the selected version of the
            selected resource with the current one using the <xref href="file-comparison.dita"
                ><b>Compare Files</b> tool</xref>.</li>
          <li id="li_flw_lmy_kpb"><uicontrol>Compare with each other</uicontrol> (available when
            selecting 2 versions of a single file) - This action compares the selected versions with
            each other using the <xref href="file-comparison.dita"><b>Compare Files</b>
            tool</xref>.</li>
        </ul></p>
    </section>
    <section id="section_ps4_kny_kpb">
      <title>Blame</title>
      <p id="p_p1j_lny_kpb">The contextual menu of each unstaged resource contains a <uicontrol>Show
          blame</uicontrol> action that opens the selected resource in the main editing area and
        colors the editor lines with different colors based on the revision information. Selecting a
        line in the opened editor will highlight the corresponding entry from the history table in
        the <uicontrol>Git History</uicontrol> side-view.</p>
      <p id="p_q1j_lny_kpb">This action is also available in the contextual menu of the current
        editor and of the Git resources from the <xref href="using-the-project-view.dita"
            ><uicontrol>Project</uicontrol> side-view</xref>.</p>
    </section>
    <section id="section_t21_pny_kpb">
      <title>Unstaged Files Area</title>
      <p id="p_tpy_tny_kpb">In the <uicontrol>Unstaged files</uicontrol> area, you will see all the
        modifications that have occurred in your working copy (files that have been modified, new
        files, and deleted files) and are not part of the next commit.<ul id="ul_upy_tny_kpb">
          <li id="li_vpy_tny_kpb">Various actions are available in the contextual menu (<b>Open</b>,
              <b>Open in compare editor</b>, <b>Stage</b>, <b>Discard</b>, <b>Show history</b>,
              <b>Show blame</b>, and more).</li>
          <li id="li_wpy_tny_kpb">You can stage files (i.e. move them to the <xref
              href="#git-addon/section_pxw_wny_kpb" format="dita"><uicontrol>Staged
                files</uicontrol> area</xref>) using the actions from the toolbar found above the
            top-right corner of this area. You can choose between staging all the files, by clicking
            the <b>Stage all</b> button (double arrow icon), and staging specific files, by
            selecting them and clicking the <b>Stage selected</b> button (single arrow icon).</li>
          <li id="li_xpy_tny_kpb">You can switch between the list view and the tree view by clicking
            on the <uicontrol>Switch to tree/list view</uicontrol> button positioned to the right of
            the staging buttons.</li>
        </ul></p>
    </section>
    <section id="section_pxw_wny_kpb">
      <title>Staged Files Area</title>
      <p id="p_qxw_wny_kpb">In the <uicontrol>Staged files</uicontrol> area, you will see all the
        resources that are ready to be committed. The files from this area can be unstaged and sent
        back to the <xref href="#git-addon/section_t21_pny_kpb" format="dita"><uicontrol>Unstaged
            files</uicontrol> area</xref>. This area has actions similar to those from the <xref
          href="#git-addon/section_t21_pny_kpb" format="dita"><uicontrol>Unstaged files</uicontrol>
          area</xref>, with the exception of the <uicontrol>Show history</uicontrol> and
          <uicontrol>Show blame</uicontrol> actions that are not available here.</p>
    </section>
    <section id="section_zcj_34y_kpb">
      <title>Comparing Changes and Conflict Resolution</title>
      <p id="p_gpn_j4y_kpb">At any time, if you want to see the differences between the last commit
        and your current modifications, you can double-click a file from either the <xref
          href="#git-addon/section_t21_pny_kpb" format="dita"><uicontrol>Unstaged files</uicontrol>
          area</xref> or <xref href="#git-addon/section_pxw_wny_kpb" format="dita"><uicontrol>Staged
            files</uicontrol> area</xref>, and the <xref href="file-comparison.dita"><b>Compare
            Files</b></xref> window will appear and highlight the changes.</p>
      <p id="p_hpn_j4y_kpb">If the file has a conflict (has been modified both by you and another),
          <xref href="file-comparison.dita#file-comparison/threeway_comparisons"><b>Oxygen's 3-Way
            file comparison</b> feature</xref> will show a comparison between the local change, the
        remote change, and the original base revision.</p>
    </section>
    <section id="section_bwl_r4y_kpb">
      <title>Committing</title>
      <p id="p_sbf_s4y_kpb">After staging the files, on the bottom of the view you can provide a
        commit message and commit them to your local repository. For convenience, you can also
        select a previously provided message.</p>
      <p id="p_tbf_s4y_kpb">In the toolbar above the <uicontrol>Commit message</uicontrol> text
        area, there are a few toggle buttons that affect your commit if they are enabled:<ul
          id="ul_ubf_s4y_kpb">
          <li id="li_vbf_s4y_kpb"><uicontrol>Amend last commit</uicontrol> - Enabling this option is
            a convenient way to modify the most recent commit. It lets you combine staged changes
            with the previous commit instead of creating an entirely new commit. It can also be used
            to simply edit the previous commit message without changing its snapshot. This action
            should not be performed on public commits (commits that were pushed to the remote
            repository).</li>
          <li id="li_wbf_s4y_kpb"><uicontrol>Automatically push changes to remote when
              committing</uicontrol> - If this option is enabled, when a commit is performed, the
            committed changes are also pushed to the remote repository.</li>
        </ul></p>
    </section>
    <section id="section_emm_v4y_kpb">
      <title>Push/Pull (with Merge or Rebase)</title>
      <p id="p_mhy_w4y_kpb">To push your local repository changes to the remote repository, use the
          <uicontrol>Push</uicontrol> button from the view's toolbar (up arrow).</p>
      <p id="p_nhy_w4y_kpb">To bring the changes from the remote repository into your local
        repository, use one of the <uicontrol>Pull</uicontrol> actions from the same toolbar (down
        arrow). You can choose between <uicontrol>Pull (merge)</uicontrol> and <uicontrol>Pull
          (rebase)</uicontrol>. The invoked action is promoted as the current action of the toolbar
          button.<note id="note_jnw_bpy_kpb">When pushing a local branch that does not have a
          corresponding remote branch, a remote branch will automatically be created with the same
          name as the local branch.</note></p>
    </section>
    <section id="section_xz2_dpy_kpb">
      <title>File Conflict Solving Workflow</title>
      <p id="p_ijj_gpy_kpb">After editing a file, committing it to the local repository, and trying
        to push it to the remote repository, if a warning appears about not being up to date with
        the repository, follow these steps:<ol id="ol_jjj_gpy_kpb">
          <li id="li_kjj_gpy_kpb">Pull the data from the repository using one of the <i>Pull</i>
            actions.</li>
          <li id="li_ljj_gpy_kpb">In the <xref href="#git-addon/section_t21_pny_kpb" format="dita"
                ><uicontrol>Unstaged files</uicontrol> area</xref>, select each conflicted file and
            resolve the conflicts. You can do this, for example, by opening the conflicted files in
            the compare editor, either by double-clicking on them or by using the contextual menu
            action, and then choose what changes you want to keep and discard, and save the
            document. You can also use the <uicontrol>Resolve using Mine</uicontrol>,
              <uicontrol>Resolve using Theirs</uicontrol>, or <uicontrol>Mark as
              resolved</uicontrol> actions from the contextual menu of a resource.</li>
          <li id="li_mjj_gpy_kpb">If you choose to use the compare editor, after you close it, the
            file will be staged automatically and moved to the <xref
              href="#git-addon/section_pxw_wny_kpb" format="dita"><uicontrol>Staged
                files</uicontrol> area</xref>.</li>
        </ol></p>
      <p id="p_njj_gpy_kpb">At this point, the next actions depend on which <i>Pull</i> action was
          chosen:<ul id="ul_ojj_gpy_kpb">
          <li id="li_pjj_gpy_kpb">
            <p id="p_qjj_gpy_kpb"><uicontrol>Pull (merge)</uicontrol>:<ol id="ol_rjj_gpy_kpb">
                <li id="li_sjj_gpy_kpb">When all the conflicts are resolved and no more files are
                  left in the <xref href="#git-addon/section_t21_pny_kpb" format="dita"
                      ><uicontrol>Unstaged files</uicontrol> area</xref>, the changes can be
                  committed.</li>
                <li id="li_tjj_gpy_kpb">Enter a message and commit. You will now have new changes to
                  push.</li>
                <li id="li_ujj_gpy_kpb">Push the changes to the remote repository.</li>
              </ol><note id="note_ymz_spy_kpb">You can abort the merge by clicking the
                  <uicontrol>Abort merge</uicontrol> button. This will revert the repository to its
                previous state prior to the pull attempt.</note></p>
          </li>
          <li id="li_wjj_gpy_kpb">
            <p id="p_xjj_gpy_kpb"><uicontrol>Pull (rebase)</uicontrol>:<ol id="ol_yjj_gpy_kpb">
                <li id="li_zjj_gpy_kpb">When all the conflicts are resolved, click the
                    <uicontrol>Continue rebase</uicontrol> button.</li>
                <li id="li_akj_gpy_kpb">Push any outgoing changes.</li>
              </ol><note id="note_yh2_dqy_kpb">You can abort the rebase by clicking the
                  <uicontrol>Abort rebase</uicontrol> button. This will revert the repository to its
                previous state prior to the pull request.</note></p>
          </li>
        </ul></p>
    </section>
    <section id="section_spd_fqy_kpb">
      <title>The Project View and the Current Editor</title>
      <p id="p_tpd_fqy_kpb">For resources from Git repositories, this add-on also contributes a
        variety of actions in the contextual menus of the <xref href="using-the-project-view.dita"
            ><uicontrol>Project</uicontrol> side-view</xref> and the current editor
          (<uicontrol>Text</uicontrol> and <uicontrol>Author</uicontrol> modes). These actions
        include: <uicontrol>Show history</uicontrol>, <uicontrol>Show blame</uicontrol>,
          <uicontrol>Git Diff</uicontrol> (only in the <i>Project</i> view), and
          <uicontrol>Commit</uicontrol> (only in the <i>Project</i> view).</p>
    </section>
    <section id="section_bqk_nqy_kpb">
      <title>Git Branch Manager</title>
      <p id="p_elv_4qy_kpb">To show all the local and remote branches, click the <uicontrol>Show Git
          Branch Manager</uicontrol> button on the toolbar of the <i>Git Staging</i> panel (look for
        the branches icon) or select <uicontrol>Git Branch Manager</uicontrol> from <menucascade>
          <uicontrol>Window</uicontrol>
          <uicontrol>Show view</uicontrol>
        </menucascade>. By default, the <i>Git Branch Manager</i> is presented to the right of the
        editing area.</p>
      <p id="p_flv_4qy_kpb">The <i>Git Branch Manager</i> side-view displays all the branches as a
        tree. The tree can be filtered using the text field at the top of the panel and you can
        reload the information by using the <uicontrol>Refresh</uicontrol> action. When hovering the
        cursor over a branch name, a tooltip is displayed that provides information about the last
        commit performed on that branch (such as the author and the date of the commit).</p>
      <p id="p_glv_4qy_kpb">The following actions are available in the contextual menu for each
        local branch:</p>
      <ul id="ul_hlv_4qy_kpb">
        <li id="li_ilv_4qy_kpb"><uicontrol>Checkout branch</uicontrol> - Checks out the selected
          branch and switches the local repository to the selected branch.</li>
        <li id="li_jlv_4qy_kpb">
          <p id="p_klv_4qy_kpb"><uicontrol>Create branch</uicontrol> - Creates a new branch using
            the selected branch as the starting point. The new branch is automatically checked out
            by default. To disable this behavior, deselect the <uicontrol>Checkout
              branch</uicontrol> option in the <i>Create branch</i> dialog box.<note
              id="note_mlz_rry_kpb" type="tip">To publish a new branch to the remote repository and
              start tracking that branch, you need to simply push the local branch using the
              dedicated action from the <uicontrol>Git Staging</uicontrol> side-view.</note></p>
        </li>
        <li id="li_mlv_4qy_kpb"><uicontrol>Delete branch</uicontrol> - Deletes the selected
          branch.</li>
      </ul>
      <p id="p_nlv_4qy_kpb">For the remote branches, the <uicontrol>Checkout branch</uicontrol>
        action checks out the selected branch and creates a local branch from the selected remote
        branch.</p>
    </section>
    <section id="section_lvb_pqy_kpb">
      <title>Preferences</title>
      <p id="p_wjr_pqy_kpb">The <i>Git Client</i> add-on contributes a preferences page to <ph
          keyref="product"/>. To access it, go to <menucascade>
          <uicontrol>Options</uicontrol>
          <uicontrol>Preferences</uicontrol>
          <uicontrol>Plugins</uicontrol>
          <uicontrol>Git Client</uicontrol>
        </menucascade> or click the <b>Settings</b> button from the toolbar of the <uicontrol>Git
          Staging</uicontrol> view and select <uicontrol>Preferences</uicontrol>. This preferences
        page includes the following options:</p>
      <ul id="ul_xjr_pqy_kpb">
        <li id="li_yjr_pqy_kpb">
          <p id="p_zjr_pqy_kpb"><uicontrol>When detecting a Git repository inside a newly opened
              project</uicontrol> - This determines what happens to the current working copy when a
            project that contains a Git repository is opened in the <xref
              href="using-the-project-view.dita"><uicontrol>Project</uicontrol> side-view</xref>.
            You can choose between:<ul id="ul_akr_pqy_kpb">
              <li id="li_bkr_pqy_kpb"><uicontrol>Always switch to the new working
                copy</uicontrol></li>
              <li id="li_ckr_pqy_kpb"><uicontrol>Never switch to the new working
                copy</uicontrol></li>
              <li id="li_dkr_pqy_kpb"><uicontrol>Always ask</uicontrol> (default value)</li>
            </ul></p>
        </li>
        <li id="li_fkr_pqy_kpb">
          <p id="p_gkr_pqy_kpb"><uicontrol>Notify me about new commits in the remote
              repository</uicontrol> - When this option is selected, <ph keyref="product"/> will
            show notification messages when it detects that new commits have been pushed to the
            remote repository. By default, this option is not selected.</p>
        </li>
        <li id="li_hkr_pqy_kpb">
          <p id="p_ikr_pqy_kpb"><uicontrol>Update all submodules after pulling changes from the
              remote repository</uicontrol> - If this option is selected, when a repository is
            updated using the <i>Pull</i> operation, all sub-modules are updated as well. This
            option is selected by default.</p>
        </li>
      </ul>
    </section>
    <section id="section_az5_pqy_kpb">
      <title>Editor Variables</title>
      <p id="p_em4_qqy_kpb">The <i>Git Client</i> contributes the following editor variables:</p>
      <ul id="ul_fm4_qqy_kpb">
        <li id="li_gm4_qqy_kpb"><uicontrol>${git(working_copy_name)}</uicontrol> - The name of the
          working copy directory.</li>
        <li id="li_hm4_qqy_kpb"><uicontrol>${git(working_copy_path)}</uicontrol> - The absolute file
          path of the working copy directory.</li>
        <li><uicontrol>${git(working_copy_url)}</uicontrol> - The location of the working copy
          directory as a URL.</li>
        <li id="li_im4_qqy_kpb"><uicontrol>${git(short_branch_name)}</uicontrol> - The short name of
          the current branch (e.g. <codeph>dev</codeph>).</li>
        <li id="li_jm4_qqy_kpb"><uicontrol>${git(full_branch_name)}</uicontrol> - The full name of
          the current branch (e.g. <codeph>refs/heads/dev</codeph>).</li>
      </ul>
    </section>
  </body>
</topic>
