<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="scripting_oxygen">
    <title>Scripting Oxygen</title>
    <body>
        <p>Although <ph keyref="product"/> is mostly intended to be a visual editing tool, the <xref
        href="https://www.oxygenxml.com/xml_editor/download_oxygenxml_editor.html?os=Other"
        format="html" scope="external">all platforms distribution</xref> of <ph keyref="product"/>
      is bundled with a <filepath>scripts</filepath> subfolder containing scripts to automate and
      run various utilities from the command line. For running all these scripts you are required to
      purchase a special <xref href="https://www.oxygenxml.com/oxygen_scripting.html" format="html"
        scope="external">scripting commercial license</xref>. Trial scripting licenses can also be
      provided on demand for clients interested in testing the scripts for their.</p>
    <section id="section_dny_xdh_qmb">
      <title>XML Schema Documentation</title>
      <p>You can generate documentation for XML Schemas from <ph keyref="product"/> by using the
        main menu <menucascade>
          <uicontrol>Tools</uicontrol>
          <uicontrol>Generate documentation</uicontrol>
          <uicontrol>XML Schema Documentation</uicontrol>
        </menucascade> action. The settings dialog has an <uicontrol>Export settings</uicontrol>
        button allowing the settings to be exported to an XML configuration file. Once the settings
        are exported you can use the <filepath>scripts/schemaDocumentation.sh</filepath> script to
        generate XML Schema documentation from the command line.</p>
    </section>
    <example>
      <title>Sample Command Line</title>
      <codeblock outputclass="language-ini">sh scripts/schemaDocumentation.sh  schemaFile [ [-cfg:configFile] | [[-out:outputFile]s</codeblock>
    </example>
    <section id="section_ibr_ych_qmb">
      <title>DITA Validate and Check For Completeness</title>
      <p>The <uicontrol>Validate and Check For Completeness</uicontrol> action from the
          <uicontrol>DITA Maps Manager</uicontrol> view allows you to validate a DITA Map with a
        large array of settings. The settings dialog has an <uicontrol>Export settings</uicontrol>
        button which allows you to export the settings to an XML configuration file. Once the
        settings are exported you can use the <filepath>scripts/validateCheckDITA</filepath> script
        to run validation on a DITA Map and report the results in a separate XML document. </p>
    </section>
    <example>
      <title>Sample Command Line</title>
      <codeblock outputclass="language-ini">sh scripts/validateCheckDITA.sh -i ditamapFile [ [-s settingsFile] | [-r reportFile]]</codeblock>
    </example>
    <p>A public example of using such a script as a GitHub action for reporting errors in pull
      requests on DITA project can be found here: <xref
        href="https://github.com/oxygenxml/blog/blob/master/.github/workflows/workflow.yml"
        format="yml" scope="external"/>. The GitHub action calls a Gradle script target named
        <codeph>runValidation</codeph>: <xref
        href="https://github.com/oxygenxml/blog/blob/master/build/build.gradle" format="gradle"
        scope="external"/>.</p>
    </body>
</topic>
