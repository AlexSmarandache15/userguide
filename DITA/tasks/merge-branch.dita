<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/task.dtd">
<task id="merge-branch">
  <title>Reintegrate a Branch</title>
  <taskbody>
    <prereq id="reintegrate-merge-prereq">
      <p>There are some conditions that apply to reintegrate a branch:<ul>
          <li>The server must support merge tracking.</li>
          <li>The source branch (to be reintegrated) must be coherently synchronized with its parent
            branch. This means that all revisions between the branching point and the last revision
            merged from the parent branch to the child branch must be merged to the latter one
            (there must be no missing revisions in-between).</li>
          <li>The working copy <b>must not</b> contain the following:<ul id="ul_tbg_4lg_34">
              <li>Local modifications.</li>
              <li>A mixture of revisions (all items must point to the same revision).</li>
              <li>Sparse directories (all directories must be of depth <term>infinity</term>).</li>
              <li>Switched items.</li>
            </ul></li>
          <li>The revision of the working copy must be greater than or equal to the last revision of
            the parent branch with which the child branch was synchronized.</li>
        </ul><note type="tip">You can use <xref
            href="../topics/pre-merge-checks.dita#pre-merge-checks">the <term>pre-merge
              checks</term> option</xref> to make sure these conditions are fulfilled.</note></p>
      <p>This method is useful when you have a feature branch on which the development has concluded
        and it should be merged back into its parent branch. Since you have kept the feature branch
        synchronized with its parent, the latest versions of them will be absolutely identical
        except for your feature branch changes. These changes can be reintegrated into the parent
        branch by using a working copy of it and the <uicontrol>Reintegrate a branch</uicontrol>
        option.</p>
      <p>This method uses the <term>merge-tracking</term> features of <ph keyref="apacheSubversion"
        /> to automatically calculate the correct revision ranges and to perform additional checks
        that will ensure that the branch to be reintegrated has been fully updated with its parent
        changes. This ensures that you do not accidentally undo work that others have committed to
        the parent branch since the last time you synchronized the child branch with it. After the
        merge, all branch development will be completely merged back into the parent branch, and the
        child branch will be redundant and can be deleted from the repository.<note type="tip"
          >Before reintegrating the child branch it is recommended to synchronize it with its parent
          branch one more time, to help avoid any possible conflicts.</note></p>
      <p>To reintegrate a child branch into its parent branch, follow these steps:</p>
    </prereq>
    <steps>
      <step conref="merge-revisions-range.dita#merge-revisions-range/start-wizard">
        <cmd/>
      </step>
      <step>
        <cmd>Select the <uicontrol>Reintegrate a branch</uicontrol> option.</cmd>
        <info>
          <note>This option is not available if the selected working copy item (or if it is a
            directory, any of the items inside of it) has any type of modification. This is because
            it is mandatory for the target item to have no modifications.</note>
        </info>
      </step>
      <step conref="merge-revisions-range.dita#merge-revisions-range/pre-merge-checks-step">
        <cmd/>
      </step>
      <step>
        <cmd>Press the <uicontrol>Next</uicontrol> button.</cmd>
        <stepresult>The <uicontrol>Reintegrate a branch</uicontrol> wizard page is
          displayed.</stepresult>
      </step>
      <step>
        <cmd>In the <b>Child branch (URL)</b> text box, enter <xref
            href="../topics/entering-local-paths-urls.dita#entering-local-paths-urls/url-section"
            >the URL of the child <term>branch</term> to be reintegrated</xref>. This means that the
          URL must belong to the same repository as your working copy that was created from the
          parent branch.</cmd>
        <info><ph
            conref="merge-revisions-range.dita#merge-revisions-range/merge_browse_source_repository"
            /><note type="tip"><ph
              conref="merge-revisions-range.dita#merge-revisions-range/merge-source-peg-revision"/>
            The peg revision specifies both the peg revision of the URL and the latest revision that
            will be considered for merging. By default, the <codeph>HEAD</codeph> revision is
            assumed.</note></info>
        <stepresult><ph conref="merge-revisions-range.dita#merge-revisions-range/options-set-result"
            /><note>Since a <i>reintegrate merge</i> is so specialized, most of the merge options
            are not available, except for those in the <uicontrol>File Comparison</uicontrol>
            category.</note></stepresult>
      </step>
      <step conref="merge-revisions-range.dita#merge-revisions-range/perform-merge">
        <cmd/>
      </step>
    </steps>
    <result conref="merge-revisions-range.dita#merge-revisions-range/merge-result"/>
    <postreq conref="merge-revisions-range.dita#merge-revisions-range/merge-postreq">
      <note type="important">Once a <i>reintegrate merge</i> is done, the child branch is no longer
        usable for further work. It is not able to correctly absorb new changes from the parent
        branch, nor can it be properly reintegrated into it again. For this reason, if you want to
        keep working on your feature branch, you can do one of the following:<ul id="ul_rd2_njm_34">
          <li>Delete the child branch from the repository and then re-create it from the same parent
            branch (after the previous reintegration was committed).</li>
          <li>Perform a new merge on the child branch using the <uicontrol><image
                href="../img/SVNMerge16.png" id="image_lhq_gnq_4r"/>Merge</uicontrol> action:<ul
              id="ul_srz_zrs_4r">
              <li>Select the <uicontrol>Merge revisions</uicontrol> option.</li>
              <li>Using the <uicontrol>specific revision(s)</uicontrol> text box, specify the
                revision created when committing the reintegration on the parent branch.</li>
              <li>In the <uicontrol>Merge Options</uicontrol> wizard page, enable the
                  <uicontrol>Only record the merge (block revisions from getting merged)</uicontrol>
                option.</li>
            </ul><p>When reintegrating your branch into its parent branch, you create a new revision
                <codeph>R</codeph> that includes the changes from the child branch. The changes made
              to the parent in this revision <codeph>R</codeph> are semantically equivalent to the
              changes you made to your branch. If you now try to merge outstanding changes from the
              parent to your branch, Subversion will consider changes made in revision
                <codeph>R</codeph> as eligible for merging into the branch. However, since your
              branch already contains all of these changes, merging them again will result in
              conflicts. These conflicts are often <term>tree conflicts</term>, especially if
              renames were made on the child branch or the parent branch while the child branch was
              in development.</p></li>
        </ul></note>
    </postreq>
  </taskbody>
</task>
